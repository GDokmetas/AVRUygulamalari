
AVR30FreqDivider.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a2  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000607  00000000  00000000  00000866  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000022e  00000000  00000000  00000e6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000109c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036e  00000000  00000000  000010c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  0000142e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 6e 00 	jmp	0xdc	; 0xdc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define F_CPU 16000000UL
#include <avr/interrupt.h>

int main(void)
{
	DDRC |= (1<<PC5);
  80:	3d 9a       	sbi	0x07, 5	; 7
	DDRD |= (1<<PORTD6);
  82:	56 9a       	sbi	0x0a, 6	; 10
	DDRD &= ~(1<<PORTD4);
  84:	54 98       	cbi	0x0a, 4	; 10
	TCCR0A |= (1<<WGM01); // CTC MOD
  86:	84 b5       	in	r24, 0x24	; 36
  88:	82 60       	ori	r24, 0x02	; 2
  8a:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<COM0A0);
  8c:	84 b5       	in	r24, 0x24	; 36
  8e:	80 64       	ori	r24, 0x40	; 64
  90:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS01);
  92:	85 b5       	in	r24, 0x25	; 37
  94:	82 60       	ori	r24, 0x02	; 2
  96:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1<<CS02);
  98:	85 b5       	in	r24, 0x25	; 37
  9a:	84 60       	ori	r24, 0x04	; 4
  9c:	85 bd       	out	0x25, r24	; 37
	OCR0A = 1;
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	87 bd       	out	0x27, r24	; 39
	
	 unsigned long frekans = 10000UL; // deðiþtirilebilir
    DDRB |= ((1<<PB1) | (1<<PB2));
  a2:	84 b1       	in	r24, 0x04	; 4
  a4:	86 60       	ori	r24, 0x06	; 6
  a6:	84 b9       	out	0x04, r24	; 4
    TCCR1A = 0;
  a8:	a0 e8       	ldi	r26, 0x80	; 128
  aa:	b0 e0       	ldi	r27, 0x00	; 0
  ac:	1c 92       	st	X, r1
    TCCR1B = 0;
  ae:	e1 e8       	ldi	r30, 0x81	; 129
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	10 82       	st	Z, r1
    OCR1B = 0;
  b4:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
  b8:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
    
    int ocr_deger = 1.0/frekans / (2.0/16000000.0)-1;
    OCR1A = ocr_deger;
  bc:	8f e1       	ldi	r24, 0x1F	; 31
  be:	93 e0       	ldi	r25, 0x03	; 3
  c0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  c4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    
    TCCR1A |= ((1<<COM1B0) | (1<<COM1A0));
  c8:	8c 91       	ld	r24, X
  ca:	80 65       	ori	r24, 0x50	; 80
  cc:	8c 93       	st	X, r24
    TCCR1B |= (1<<WGM12); // CTC modu
  ce:	80 81       	ld	r24, Z
  d0:	88 60       	ori	r24, 0x08	; 8
  d2:	80 83       	st	Z, r24
    TCCR1B |= (1<<CS10); // 8x prescaler
  d4:	80 81       	ld	r24, Z
  d6:	81 60       	ori	r24, 0x01	; 1
  d8:	80 83       	st	Z, r24
  da:	ff cf       	rjmp	.-2      	; 0xda <main+0x5a>

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
