
AVR52I2CSlave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000198  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  0000020c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008c6  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ae  00000000  00000000  00000bb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a5  00000000  00000000  00001360  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f0  00000000  00000000  00001708  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e5  00000000  00000000  000017f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ff  00000000  00000000  00001bdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001cdc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 30       	cpi	r26, 0x05	; 5
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 c2 00 	call	0x184	; 0x184 <main>
  88:	0c 94 ca 00 	jmp	0x194	; 0x194 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <I2C_setCallbacks>:
{
  // clear acknowledge and enable bits
  cli();
  TWCR = 0;
  TWAR = 0;
  sei();
  90:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <I2C_recv+0x1>
  94:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <I2C_recv>
  98:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <_edata+0x1>
  9c:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
  a0:	08 95       	ret

000000a2 <I2C_init>:
  a2:	f8 94       	cli
  a4:	88 0f       	add	r24, r24
  a6:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__DATA_REGION_ORIGIN__+0x5a>
  aa:	85 ec       	ldi	r24, 0xC5	; 197
  ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  b0:	78 94       	sei
  b2:	08 95       	ret

000000b4 <__vector_24>:
}

ISR(TWI_vect)
{
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	2f 93       	push	r18
  c0:	3f 93       	push	r19
  c2:	4f 93       	push	r20
  c4:	5f 93       	push	r21
  c6:	6f 93       	push	r22
  c8:	7f 93       	push	r23
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
  ce:	af 93       	push	r26
  d0:	bf 93       	push	r27
  d2:	ef 93       	push	r30
  d4:	ff 93       	push	r31
  switch(TW_STATUS)
  d6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  da:	88 7f       	andi	r24, 0xF8	; 248
  dc:	80 38       	cpi	r24, 0x80	; 128
  de:	49 f0       	breq	.+18     	; 0xf2 <__vector_24+0x3e>
  e0:	18 f4       	brcc	.+6      	; 0xe8 <__vector_24+0x34>
  e2:	88 23       	and	r24, r24
  e4:	19 f1       	breq	.+70     	; 0x12c <__vector_24+0x78>
  e6:	28 c0       	rjmp	.+80     	; 0x138 <__vector_24+0x84>
  e8:	88 3a       	cpi	r24, 0xA8	; 168
  ea:	71 f0       	breq	.+28     	; 0x108 <__vector_24+0x54>
  ec:	88 3b       	cpi	r24, 0xB8	; 184
  ee:	a9 f0       	breq	.+42     	; 0x11a <__vector_24+0x66>
  f0:	23 c0       	rjmp	.+70     	; 0x138 <__vector_24+0x84>
  {
    case TW_SR_DATA_ACK:
      // received data from master, call the receive callback
      I2C_recv(TWDR); 
  f2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
  f6:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <I2C_recv>
  fa:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <I2C_recv+0x1>
  fe:	09 95       	icall
      TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 100:	85 ec       	ldi	r24, 0xC5	; 197
 102:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
      break;
 106:	1b c0       	rjmp	.+54     	; 0x13e <__vector_24+0x8a>
    case TW_ST_SLA_ACK:
      // master is requesting data, call the request callback
      I2C_req();
 108:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
 10c:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <_edata+0x1>
 110:	09 95       	icall
      TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 112:	85 ec       	ldi	r24, 0xC5	; 197
 114:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
      break;
 118:	12 c0       	rjmp	.+36     	; 0x13e <__vector_24+0x8a>
    case TW_ST_DATA_ACK:
      // master is requesting data, call the request callback
      I2C_req();
 11a:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
 11e:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <_edata+0x1>
 122:	09 95       	icall
      TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 124:	85 ec       	ldi	r24, 0xC5	; 197
 126:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
      break;
 12a:	09 c0       	rjmp	.+18     	; 0x13e <__vector_24+0x8a>
    case TW_BUS_ERROR:
      // some sort of erroneous state, prepare TWI to be readdressed
      TWCR = 0;
 12c:	ec eb       	ldi	r30, 0xBC	; 188
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	10 82       	st	Z, r1
      TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN); 
 132:	85 ec       	ldi	r24, 0xC5	; 197
 134:	80 83       	st	Z, r24
      break;
 136:	03 c0       	rjmp	.+6      	; 0x13e <__vector_24+0x8a>
    default:
      TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 138:	85 ec       	ldi	r24, 0xC5	; 197
 13a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
      break;
  }
} 
 13e:	ff 91       	pop	r31
 140:	ef 91       	pop	r30
 142:	bf 91       	pop	r27
 144:	af 91       	pop	r26
 146:	9f 91       	pop	r25
 148:	8f 91       	pop	r24
 14a:	7f 91       	pop	r23
 14c:	6f 91       	pop	r22
 14e:	5f 91       	pop	r21
 150:	4f 91       	pop	r20
 152:	3f 91       	pop	r19
 154:	2f 91       	pop	r18
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <I2C_received>:

volatile uint8_t data;

void I2C_received(uint8_t received_data)
{
	data = received_data;
 160:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <data>
 164:	08 95       	ret

00000166 <I2C_requested>:
}

void I2C_requested()
{
	I2C_transmitByte(data);
 166:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <data>
void I2C_stop(void);
void I2C_setCallbacks(void (*recv)(uint8_t), void (*req)());

inline void __attribute__((always_inline)) I2C_transmitByte(uint8_t data)
{
  TWDR = data;
 16a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 16e:	08 95       	ret

00000170 <setup>:
}

void setup()
{
	// set received/requested callbacks
	I2C_setCallbacks(I2C_received, I2C_requested);
 170:	63 eb       	ldi	r22, 0xB3	; 179
 172:	70 e0       	ldi	r23, 0x00	; 0
 174:	80 eb       	ldi	r24, 0xB0	; 176
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 48 00 	call	0x90	; 0x90 <I2C_setCallbacks>

	// init I2C
	I2C_init(I2C_ADDR);
 17c:	8f e2       	ldi	r24, 0x2F	; 47
 17e:	0e 94 51 00 	call	0xa2	; 0xa2 <I2C_init>
 182:	08 95       	ret

00000184 <main>:
}

int main()
{
	DDRD = 0xFF;
 184:	8f ef       	ldi	r24, 0xFF	; 255
 186:	8a b9       	out	0x0a, r24	; 10
	
	setup();
 188:	0e 94 b8 00 	call	0x170	; 0x170 <setup>

	// Main program loop
	while(1)
	{
		PORTD = data;
 18c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <data>
 190:	8b b9       	out	0x0b, r24	; 11
 192:	fc cf       	rjmp	.-8      	; 0x18c <main+0x8>

00000194 <_exit>:
 194:	f8 94       	cli

00000196 <__stop_program>:
 196:	ff cf       	rjmp	.-2      	; 0x196 <__stop_program>
