
AVR40UartReadString.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000002ac  00000340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800114  00800114  00000354  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000384  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bf2  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000841  00000000  00000000  00001036  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000598  00000000  00000000  00001877  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  00001e10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ef  00000000  00000000  00001f44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000496  00000000  00000000  00002433  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000028c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 94 00 	jmp	0x128	; 0x128 <__vector_18>
  4c:	0c 94 c2 00 	jmp	0x184	; 0x184 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ea       	ldi	r30, 0xAC	; 172
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 35       	cpi	r26, 0x59	; 89
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#define F_CPU 16000000UL
#include <util/delay.h>
#include "uart.h"
#include <string.h>
int main(void)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	64 97       	sbiw	r28, 0x14	; 20
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
    sei();
  ba:	78 94       	sei
    uart_init(UART_BAUD_SELECT(9600,F_CPU));
  bc:	87 e6       	ldi	r24, 0x67	; 103
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <uart_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	2f ef       	ldi	r18, 0xFF	; 255
  c6:	81 ee       	ldi	r24, 0xE1	; 225
  c8:	94 e0       	ldi	r25, 0x04	; 4
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x24>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x2e>
  d4:	00 00       	nop
    _delay_ms(100);
    uart_puts("UART STRING OKUMA \n");
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	0e 94 38 01 	call	0x270	; 0x270 <uart_puts>
		int i = 0;
	    char buf [20];
		while(1)
			{
			
			buf[i] = uart_getc();
  de:	ce 01       	movw	r24, r28
  e0:	01 96       	adiw	r24, 0x01	; 1
  e2:	7c 01       	movw	r14, r24
  e4:	c8 2e       	mov	r12, r24
  e6:	df 2c       	mov	r13, r15
    _delay_ms(100);
    uart_puts("UART STRING OKUMA \n");
    
    while (1) 
    {
	if (uart_available() > 0)
  e8:	0e 94 47 01 	call	0x28e	; 0x28e <uart_available>
  ec:	18 16       	cp	r1, r24
  ee:	19 06       	cpc	r1, r25
  f0:	dc f7       	brge	.-10     	; 0xe8 <main+0x42>
  f2:	00 e0       	ldi	r16, 0x00	; 0
  f4:	10 e0       	ldi	r17, 0x00	; 0
		int i = 0;
	    char buf [20];
		while(1)
			{
			
			buf[i] = uart_getc();
  f6:	0e 94 05 01 	call	0x20a	; 0x20a <uart_getc>
  fa:	f7 01       	movw	r30, r14
  fc:	e0 0f       	add	r30, r16
  fe:	f1 1f       	adc	r31, r17
 100:	80 83       	st	Z, r24
			if (buf[i] == '\n')
 102:	8a 30       	cpi	r24, 0x0A	; 10
 104:	61 f0       	breq	.+24     	; 0x11e <main+0x78>
			break;
			if (buf[i] == '\0')
 106:	88 23       	and	r24, r24
 108:	51 f0       	breq	.+20     	; 0x11e <main+0x78>
			break;
			if (buf[i] == '\r')
 10a:	8d 30       	cpi	r24, 0x0D	; 13
 10c:	41 f0       	breq	.+16     	; 0x11e <main+0x78>
			break;
			i++;
 10e:	0f 5f       	subi	r16, 0xFF	; 255
 110:	1f 4f       	sbci	r17, 0xFF	; 255
			if (i>19)
 112:	04 31       	cpi	r16, 0x14	; 20
 114:	11 05       	cpc	r17, r1
 116:	7c f3       	brlt	.-34     	; 0xf6 <main+0x50>
			i = 0;
 118:	00 e0       	ldi	r16, 0x00	; 0
 11a:	10 e0       	ldi	r17, 0x00	; 0
 11c:	ec cf       	rjmp	.-40     	; 0xf6 <main+0x50>
			}
		uart_puts(buf);
 11e:	8c 2d       	mov	r24, r12
 120:	9d 2d       	mov	r25, r13
 122:	0e 94 38 01 	call	0x270	; 0x270 <uart_puts>
 126:	e0 cf       	rjmp	.-64     	; 0xe8 <main+0x42>

00000128 <__vector_18>:
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart_putc(c);

}/* uart_puts_p */
 128:	1f 92       	push	r1
 12a:	0f 92       	push	r0
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	0f 92       	push	r0
 130:	11 24       	eor	r1, r1
 132:	2f 93       	push	r18
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
 138:	ef 93       	push	r30
 13a:	ff 93       	push	r31
 13c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 140:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 144:	8c 71       	andi	r24, 0x1C	; 28
 146:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <UART_RxHead>
 14a:	ef 5f       	subi	r30, 0xFF	; 255
 14c:	ef 71       	andi	r30, 0x1F	; 31
 14e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <UART_RxTail>
 152:	e9 17       	cp	r30, r25
 154:	39 f0       	breq	.+14     	; 0x164 <__vector_18+0x3c>
 156:	e0 93 16 01 	sts	0x0116, r30	; 0x800116 <UART_RxHead>
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	e7 5e       	subi	r30, 0xE7	; 231
 15e:	fe 4f       	sbci	r31, 0xFE	; 254
 160:	20 83       	st	Z, r18
 162:	01 c0       	rjmp	.+2      	; 0x166 <__vector_18+0x3e>
 164:	82 e0       	ldi	r24, 0x02	; 2
 166:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <__data_end>
 16a:	89 2b       	or	r24, r25
 16c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 170:	ff 91       	pop	r31
 172:	ef 91       	pop	r30
 174:	9f 91       	pop	r25
 176:	8f 91       	pop	r24
 178:	2f 91       	pop	r18
 17a:	0f 90       	pop	r0
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	0f 90       	pop	r0
 180:	1f 90       	pop	r1
 182:	18 95       	reti

00000184 <__vector_19>:
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	8f 93       	push	r24
 190:	9f 93       	push	r25
 192:	ef 93       	push	r30
 194:	ff 93       	push	r31
 196:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <UART_TxHead>
 19a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <UART_TxTail>
 19e:	98 17       	cp	r25, r24
 1a0:	69 f0       	breq	.+26     	; 0x1bc <__vector_19+0x38>
 1a2:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <UART_TxTail>
 1a6:	ef 5f       	subi	r30, 0xFF	; 255
 1a8:	ef 71       	andi	r30, 0x1F	; 31
 1aa:	e0 93 17 01 	sts	0x0117, r30	; 0x800117 <UART_TxTail>
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	e7 5c       	subi	r30, 0xC7	; 199
 1b2:	fe 4f       	sbci	r31, 0xFE	; 254
 1b4:	80 81       	ld	r24, Z
 1b6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 1ba:	05 c0       	rjmp	.+10     	; 0x1c6 <__vector_19+0x42>
 1bc:	e1 ec       	ldi	r30, 0xC1	; 193
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	8f 7d       	andi	r24, 0xDF	; 223
 1c4:	80 83       	st	Z, r24
 1c6:	ff 91       	pop	r31
 1c8:	ef 91       	pop	r30
 1ca:	9f 91       	pop	r25
 1cc:	8f 91       	pop	r24
 1ce:	0f 90       	pop	r0
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	0f 90       	pop	r0
 1d4:	1f 90       	pop	r1
 1d6:	18 95       	reti

000001d8 <uart_init>:
 1d8:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <UART_TxHead>
 1dc:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <UART_TxTail>
 1e0:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <UART_RxHead>
 1e4:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <UART_RxTail>
 1e8:	99 23       	and	r25, r25
 1ea:	1c f4       	brge	.+6      	; 0x1f2 <uart_init+0x1a>
 1ec:	22 e0       	ldi	r18, 0x02	; 2
 1ee:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 1f2:	90 78       	andi	r25, 0x80	; 128
 1f4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 1f8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 1fc:	88 e9       	ldi	r24, 0x98	; 152
 1fe:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 202:	86 e0       	ldi	r24, 0x06	; 6
 204:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 208:	08 95       	ret

0000020a <uart_getc>:
 20a:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <UART_RxHead>
 20e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <UART_RxTail>
 212:	98 17       	cp	r25, r24
 214:	a9 f0       	breq	.+42     	; 0x240 <uart_getc+0x36>
 216:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <UART_RxTail>
 21a:	9f 5f       	subi	r25, 0xFF	; 255
 21c:	9f 71       	andi	r25, 0x1F	; 31
 21e:	e9 2f       	mov	r30, r25
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	e7 5e       	subi	r30, 0xE7	; 231
 224:	fe 4f       	sbci	r31, 0xFE	; 254
 226:	20 81       	ld	r18, Z
 228:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 22c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <UART_RxTail>
 230:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	98 2f       	mov	r25, r24
 238:	88 27       	eor	r24, r24
 23a:	82 0f       	add	r24, r18
 23c:	91 1d       	adc	r25, r1
 23e:	08 95       	ret
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	91 e0       	ldi	r25, 0x01	; 1
 244:	08 95       	ret

00000246 <uart_putc>:
 246:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <UART_TxHead>
 24a:	2f 5f       	subi	r18, 0xFF	; 255
 24c:	2f 71       	andi	r18, 0x1F	; 31
 24e:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <UART_TxTail>
 252:	29 17       	cp	r18, r25
 254:	e1 f3       	breq	.-8      	; 0x24e <uart_putc+0x8>
 256:	e2 2f       	mov	r30, r18
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	e7 5c       	subi	r30, 0xC7	; 199
 25c:	fe 4f       	sbci	r31, 0xFE	; 254
 25e:	80 83       	st	Z, r24
 260:	20 93 18 01 	sts	0x0118, r18	; 0x800118 <UART_TxHead>
 264:	e1 ec       	ldi	r30, 0xC1	; 193
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	80 81       	ld	r24, Z
 26a:	80 62       	ori	r24, 0x20	; 32
 26c:	80 83       	st	Z, r24
 26e:	08 95       	ret

00000270 <uart_puts>:
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	ec 01       	movw	r28, r24
 276:	88 81       	ld	r24, Y
 278:	88 23       	and	r24, r24
 27a:	31 f0       	breq	.+12     	; 0x288 <uart_puts+0x18>
 27c:	21 96       	adiw	r28, 0x01	; 1
 27e:	0e 94 23 01 	call	0x246	; 0x246 <uart_putc>
 282:	89 91       	ld	r24, Y+
 284:	81 11       	cpse	r24, r1
 286:	fb cf       	rjmp	.-10     	; 0x27e <uart_puts+0xe>
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	08 95       	ret

0000028e <uart_available>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 28e:	f8 94       	cli
int uart_available(void)
{
	uint16_t ret;
	
	ATOMIC_BLOCK(ATOMIC_FORCEON) {
		ret = (UART_RX_BUFFER_SIZE + UART_RxHead - UART_RxTail) & UART_RX_BUFFER_MASK;
 290:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <UART_RxHead>
 294:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <UART_RxTail>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 298:	78 94       	sei
	}
	return ret;
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	80 96       	adiw	r24, 0x20	; 32
 29e:	82 1b       	sub	r24, r18
 2a0:	91 09       	sbc	r25, r1
}
 2a2:	8f 71       	andi	r24, 0x1F	; 31
 2a4:	99 27       	eor	r25, r25
 2a6:	08 95       	ret

000002a8 <_exit>:
 2a8:	f8 94       	cli

000002aa <__stop_program>:
 2aa:	ff cf       	rjmp	.-2      	; 0x2aa <__stop_program>
