
AVR16InternalTemperatureSensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000786  0000081a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000786  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800108  00800108  00000822  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000822  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000852  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009e9  00000000  00000000  000008fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000043c  00000000  00000000  000012e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000433  00000000  00000000  0000171f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000168  00000000  00000000  00001b54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e5  00000000  00000000  00001cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004cc  00000000  00000000  00001fa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  0000246d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e8       	ldi	r30, 0x86	; 134
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 30       	cpi	r26, 0x0C	; 12
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 c1 03 	jmp	0x782	; 0x782 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include <stdlib.h>
#include "lcd.h"
unsigned int Ctemp;
unsigned int Ftemp;
int main(void)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	2a 97       	sbiw	r28, 0x0a	; 10
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
	
	lcd_init(LCD_DISP_ON);
  ba:	8c e0       	ldi	r24, 0x0C	; 12
  bc:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_init>
    /* Setup ADC to use int 1.1V reference 
    and select temp sensor channel */
    ADMUX = (1<<REFS1) | (1<<REFS0) | (0<<ADLAR) | (1<<MUX3) | (0<<MUX2) | (0<<MUX1) | (0<<MUX0);
  c0:	88 ec       	ldi	r24, 0xC8	; 200
  c2:	80 93 7c 00 	sts	0x007C, r24

    /* Set conversion time to 
    112usec = [(1/(8Mhz / 64)) * (14 ADC clocks  per conversion)]
     and enable the ADC*/
    ADCSRA = (1<<ADPS2) | (1<<ADPS1) | (1<<ADEN);
  c6:	ea e7       	ldi	r30, 0x7A	; 122
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	86 e8       	ldi	r24, 0x86	; 134
  cc:	80 83       	st	Z, r24

    /* Perform Dummy Conversion to complete ADC init */
    ADCSRA |= (1<<ADSC);
  ce:	80 81       	ld	r24, Z
  d0:	80 64       	ori	r24, 0x40	; 64
  d2:	80 83       	st	Z, r24

    /* wait for conversion to complete */
    while ((ADCSRA & (1<<ADSC)) != 0);
  d4:	80 81       	ld	r24, Z
  d6:	86 fd       	sbrc	r24, 6
  d8:	fd cf       	rjmp	.-6      	; 0xd4 <main+0x2e>
	
    while(1)
    {
     /* start a new conversion on channel 8 */
     ADCSRA |= (1<<ADSC);
  da:	0a e7       	ldi	r16, 0x7A	; 122
  dc:	10 e0       	ldi	r17, 0x00	; 0
     /* wait for conversion to complete */
     while ((ADCSRA & (1<<ADSC)) != 0)
     ;

     /* Calculate the temperature in C */
     Ctemp = (ADC - 247)/1.22;
  de:	0f 2e       	mov	r0, r31
  e0:	f8 e7       	ldi	r31, 0x78	; 120
  e2:	8f 2e       	mov	r8, r31
  e4:	91 2c       	mov	r9, r1
  e6:	f0 2d       	mov	r31, r0
     Ftemp = (Ctemp * 1.8) + 32;
	 
	 char lcd_ch[10]="";
  e8:	0f 2e       	mov	r0, r31
  ea:	f6 e0       	ldi	r31, 0x06	; 6
  ec:	7f 2e       	mov	r7, r31
  ee:	f0 2d       	mov	r31, r0
  f0:	5e 01       	movw	r10, r28
  f2:	85 e0       	ldi	r24, 0x05	; 5
  f4:	a8 0e       	add	r10, r24
  f6:	b1 1c       	adc	r11, r1
    while ((ADCSRA & (1<<ADSC)) != 0);
	
    while(1)
    {
     /* start a new conversion on channel 8 */
     ADCSRA |= (1<<ADSC);
  f8:	f8 01       	movw	r30, r16
  fa:	80 81       	ld	r24, Z
  fc:	80 64       	ori	r24, 0x40	; 64
  fe:	80 83       	st	Z, r24

     /* wait for conversion to complete */
     while ((ADCSRA & (1<<ADSC)) != 0)
 100:	f8 01       	movw	r30, r16
 102:	80 81       	ld	r24, Z
 104:	86 fd       	sbrc	r24, 6
 106:	fc cf       	rjmp	.-8      	; 0x100 <main+0x5a>
     ;

     /* Calculate the temperature in C */
     Ctemp = (ADC - 247)/1.22;
 108:	f4 01       	movw	r30, r8
 10a:	60 81       	ld	r22, Z
 10c:	71 81       	ldd	r23, Z+1	; 0x01
 10e:	67 5f       	subi	r22, 0xF7	; 247
 110:	71 09       	sbc	r23, r1
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 9b 02 	call	0x536	; 0x536 <__floatunsisf>
 11a:	26 ef       	ldi	r18, 0xF6	; 246
 11c:	38 e2       	ldi	r19, 0x28	; 40
 11e:	4c e9       	ldi	r20, 0x9C	; 156
 120:	5f e3       	ldi	r21, 0x3F	; 63
 122:	0e 94 07 02 	call	0x40e	; 0x40e <__divsf3>
 126:	0e 94 6f 02 	call	0x4de	; 0x4de <__fixunssfsi>
 12a:	6b 01       	movw	r12, r22
 12c:	7c 01       	movw	r14, r24
 12e:	70 93 0b 01 	sts	0x010B, r23
 132:	60 93 0a 01 	sts	0x010A, r22
     Ftemp = (Ctemp * 1.8) + 32;
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 9b 02 	call	0x536	; 0x536 <__floatunsisf>
 13e:	26 e6       	ldi	r18, 0x66	; 102
 140:	36 e6       	ldi	r19, 0x66	; 102
 142:	46 ee       	ldi	r20, 0xE6	; 230
 144:	5f e3       	ldi	r21, 0x3F	; 63
 146:	0e 94 29 03 	call	0x652	; 0x652 <__mulsf3>
 14a:	20 e0       	ldi	r18, 0x00	; 0
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	40 e0       	ldi	r20, 0x00	; 0
 150:	52 e4       	ldi	r21, 0x42	; 66
 152:	0e 94 a3 01 	call	0x346	; 0x346 <__addsf3>
 156:	0e 94 6f 02 	call	0x4de	; 0x4de <__fixunssfsi>
 15a:	70 93 09 01 	sts	0x0109, r23
 15e:	60 93 08 01 	sts	0x0108, r22
	 
	 char lcd_ch[10]="";
 162:	19 82       	std	Y+1, r1	; 0x01
 164:	1a 82       	std	Y+2, r1	; 0x02
 166:	1b 82       	std	Y+3, r1	; 0x03
 168:	1c 82       	std	Y+4, r1	; 0x04
 16a:	f5 01       	movw	r30, r10
 16c:	87 2d       	mov	r24, r7
 16e:	11 92       	st	Z+, r1
 170:	8a 95       	dec	r24
 172:	e9 f7       	brne	.-6      	; 0x16e <main+0xc8>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 174:	4a e0       	ldi	r20, 0x0A	; 10
 176:	be 01       	movw	r22, r28
 178:	6f 5f       	subi	r22, 0xFF	; 255
 17a:	7f 4f       	sbci	r23, 0xFF	; 255
 17c:	c6 01       	movw	r24, r12
 17e:	0e 94 8c 03 	call	0x718	; 0x718 <__itoa_ncheck>
	 itoa((int)Ctemp, lcd_ch, 10);
	 lcd_home();
 182:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_home>
	 lcd_puts(lcd_ch);
 186:	ce 01       	movw	r24, r28
 188:	01 96       	adiw	r24, 0x01	; 1
 18a:	0e 94 56 01 	call	0x2ac	; 0x2ac <lcd_puts>
	 lcd_puts("C     ");
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	91 e0       	ldi	r25, 0x01	; 1
 192:	0e 94 56 01 	call	0x2ac	; 0x2ac <lcd_puts>
    }
 196:	b0 cf       	rjmp	.-160    	; 0xf8 <main+0x52>

00000198 <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 198:	5c 9a       	sbi	0x0b, 4	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19a:	00 00       	nop
    lcd_e_delay();
    lcd_e_low();
 19c:	5c 98       	cbi	0x0b, 4	; 11
 19e:	08 95       	ret

000001a0 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
 1a0:	cf 93       	push	r28
 1a2:	c8 2f       	mov	r28, r24
    unsigned char dataBits ;


    if (rs) {        /* write data        (RS=1, RW=0) */
 1a4:	66 23       	and	r22, r22
 1a6:	11 f0       	breq	.+4      	; 0x1ac <lcd_write+0xc>
       lcd_rs_high();
 1a8:	5a 9a       	sbi	0x0b, 2	; 11
 1aa:	01 c0       	rjmp	.+2      	; 0x1ae <lcd_write+0xe>
    } else {         /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 1ac:	5a 98       	cbi	0x0b, 2	; 11
    }
    lcd_rw_low();    /* RW=0  write mode      */
 1ae:	5b 98       	cbi	0x0b, 3	; 11
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 1b0:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 1b2:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 1b4:	57 9a       	sbi	0x0a, 7	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 1b6:	20 9a       	sbi	0x04, 0	; 4
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 1b8:	28 98       	cbi	0x05, 0	; 5
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 1ba:	5f 98       	cbi	0x0b, 7	; 11
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 1bc:	5e 98       	cbi	0x0b, 6	; 11
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 1be:	5d 98       	cbi	0x0b, 5	; 11
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 1c0:	cc 23       	and	r28, r28
 1c2:	0c f4       	brge	.+2      	; 0x1c6 <lcd_write+0x26>
 1c4:	28 9a       	sbi	0x05, 0	; 5
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 1c6:	c6 fd       	sbrc	r28, 6
 1c8:	5f 9a       	sbi	0x0b, 7	; 11
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 1ca:	c5 fd       	sbrc	r28, 5
 1cc:	5e 9a       	sbi	0x0b, 6	; 11
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
 1ce:	c4 fd       	sbrc	r28, 4
 1d0:	5d 9a       	sbi	0x0b, 5	; 11
        lcd_e_toggle();
 1d2:	0e 94 cc 00 	call	0x198	; 0x198 <toggle_e>
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 1d6:	28 98       	cbi	0x05, 0	; 5
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 1d8:	5f 98       	cbi	0x0b, 7	; 11
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 1da:	5e 98       	cbi	0x0b, 6	; 11
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 1dc:	5d 98       	cbi	0x0b, 5	; 11
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 1de:	c3 fd       	sbrc	r28, 3
 1e0:	28 9a       	sbi	0x05, 0	; 5
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 1e2:	c2 fd       	sbrc	r28, 2
 1e4:	5f 9a       	sbi	0x0b, 7	; 11
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 1e6:	c1 fd       	sbrc	r28, 1
 1e8:	5e 9a       	sbi	0x0b, 6	; 11
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 1ea:	c0 fd       	sbrc	r28, 0
 1ec:	5d 9a       	sbi	0x0b, 5	; 11
        lcd_e_toggle();        
 1ee:	0e 94 cc 00 	call	0x198	; 0x198 <toggle_e>
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 1f2:	5d 9a       	sbi	0x0b, 5	; 11
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 1f4:	5e 9a       	sbi	0x0b, 6	; 11
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 1f6:	5f 9a       	sbi	0x0b, 7	; 11
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 1f8:	28 9a       	sbi	0x05, 0	; 5
    }
}
 1fa:	cf 91       	pop	r28
 1fc:	08 95       	ret

000001fe <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
 1fe:	88 23       	and	r24, r24
 200:	11 f0       	breq	.+4      	; 0x206 <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
 202:	5a 9a       	sbi	0x0b, 2	; 11
 204:	01 c0       	rjmp	.+2      	; 0x208 <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 206:	5a 98       	cbi	0x0b, 2	; 11
    lcd_rw_high();                           /* RW=1  read mode      */
 208:	5b 9a       	sbi	0x0b, 3	; 11
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
 20a:	55 98       	cbi	0x0a, 5	; 10
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
 20c:	56 98       	cbi	0x0a, 6	; 10
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
 20e:	57 98       	cbi	0x0a, 7	; 10
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
 210:	20 98       	cbi	0x04, 0	; 4
                
        /* read high nibble first */
        lcd_e_high();
 212:	5c 9a       	sbi	0x0b, 4	; 11
 214:	00 00       	nop
        lcd_e_delay();        
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 216:	4d 99       	sbic	0x09, 5	; 9
 218:	02 c0       	rjmp	.+4      	; 0x21e <lcd_read+0x20>
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
                
        /* read high nibble first */
        lcd_e_high();
        lcd_e_delay();        
        data = 0;
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	01 c0       	rjmp	.+2      	; 0x220 <lcd_read+0x22>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 21e:	80 e1       	ldi	r24, 0x10	; 16
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
 220:	4e 99       	sbic	0x09, 6	; 9
 222:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 224:	4f 99       	sbic	0x09, 7	; 9
 226:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 228:	18 99       	sbic	0x03, 0	; 3
 22a:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
 22c:	5c 98       	cbi	0x0b, 4	; 11
 22e:	00 00       	nop

        lcd_e_delay();                       /* Enable 500ns low       */
    
        /* read low nibble */    
        lcd_e_high();
 230:	5c 9a       	sbi	0x0b, 4	; 11
 232:	00 00       	nop
        lcd_e_delay();
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 234:	4d 99       	sbic	0x09, 5	; 9
 236:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 238:	4e 99       	sbic	0x09, 6	; 9
 23a:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 23c:	4f 99       	sbic	0x09, 7	; 9
 23e:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 240:	18 99       	sbic	0x03, 0	; 3
 242:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
 244:	5c 98       	cbi	0x0b, 4	; 11
    }
    return data;
}
 246:	08 95       	ret

00000248 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_read>
 24e:	88 23       	and	r24, r24
 250:	dc f3       	brlt	.-10     	; 0x248 <lcd_waitbusy>
 252:	00 c0       	rjmp	.+0      	; 0x254 <lcd_waitbusy+0xc>
 254:	00 c0       	rjmp	.+0      	; 0x256 <lcd_waitbusy+0xe>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(LCD_DELAY_BUSY_FLAG);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_read>
    
}/* lcd_waitbusy */
 25c:	08 95       	ret

0000025e <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 25e:	cf 93       	push	r28
 260:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 262:	0e 94 24 01 	call	0x248	; 0x248 <lcd_waitbusy>
    lcd_write(cmd,0);
 266:	60 e0       	ldi	r22, 0x00	; 0
 268:	8c 2f       	mov	r24, r28
 26a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_write>
}
 26e:	cf 91       	pop	r28
 270:	08 95       	ret

00000272 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_command>
 278:	08 95       	ret

0000027a <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 27a:	82 e0       	ldi	r24, 0x02	; 2
 27c:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_command>
 280:	08 95       	ret

00000282 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 282:	cf 93       	push	r28
 284:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 286:	0e 94 24 01 	call	0x248	; 0x248 <lcd_waitbusy>
    if (c=='\n')
 28a:	ca 30       	cpi	r28, 0x0A	; 10
 28c:	49 f4       	brne	.+18     	; 0x2a0 <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 28e:	80 34       	cpi	r24, 0x40	; 64
 290:	10 f4       	brcc	.+4      	; 0x296 <lcd_putc+0x14>
        addressCounter = LCD_START_LINE2;
 292:	80 e4       	ldi	r24, 0x40	; 64
 294:	01 c0       	rjmp	.+2      	; 0x298 <lcd_putc+0x16>
    else
        addressCounter = LCD_START_LINE1;
 296:	80 e0       	ldi	r24, 0x00	; 0
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 298:	80 58       	subi	r24, 0x80	; 128
 29a:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_command>
 29e:	04 c0       	rjmp	.+8      	; 0x2a8 <lcd_putc+0x26>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 2a0:	61 e0       	ldi	r22, 0x01	; 1
 2a2:	8c 2f       	mov	r24, r28
 2a4:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_write>
    }

}/* lcd_putc */
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
    register char c;

    while ( (c = *s++) ) {
 2b0:	ec 01       	movw	r28, r24
 2b2:	21 96       	adiw	r28, 0x01	; 1
 2b4:	fc 01       	movw	r30, r24
 2b6:	80 81       	ld	r24, Z
 2b8:	88 23       	and	r24, r24
 2ba:	29 f0       	breq	.+10     	; 0x2c6 <lcd_puts+0x1a>
        lcd_putc(c);
 2bc:	0e 94 41 01 	call	0x282	; 0x282 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 2c0:	89 91       	ld	r24, Y+
 2c2:	81 11       	cpse	r24, r1
 2c4:	fb cf       	rjmp	.-10     	; 0x2bc <lcd_puts+0x10>
        lcd_putc(c);
    }

}/* lcd_puts */
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	08 95       	ret

000002cc <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 2cc:	cf 93       	push	r28
 2ce:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 2d0:	52 9a       	sbi	0x0a, 2	; 10
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 2d2:	53 9a       	sbi	0x0a, 3	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 2d4:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 2d6:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 2d8:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 2da:	57 9a       	sbi	0x0a, 7	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 2dc:	20 9a       	sbi	0x04, 0	; 4
 2de:	8f e9       	ldi	r24, 0x9F	; 159
 2e0:	9f e0       	ldi	r25, 0x0F	; 15
 2e2:	01 97       	sbiw	r24, 0x01	; 1
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <lcd_init+0x16>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <lcd_init+0x1c>
 2e8:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 2ea:	5e 9a       	sbi	0x0b, 6	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 2ec:	5d 9a       	sbi	0x0b, 5	; 11
    lcd_e_toggle();
 2ee:	0e 94 cc 00 	call	0x198	; 0x198 <toggle_e>
 2f2:	81 ee       	ldi	r24, 0xE1	; 225
 2f4:	94 e0       	ldi	r25, 0x04	; 4
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <lcd_init+0x2a>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <lcd_init+0x30>
 2fc:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 2fe:	0e 94 cc 00 	call	0x198	; 0x198 <toggle_e>
 302:	95 e1       	ldi	r25, 0x15	; 21
 304:	9a 95       	dec	r25
 306:	f1 f7       	brne	.-4      	; 0x304 <lcd_init+0x38>
 308:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 30a:	0e 94 cc 00 	call	0x198	; 0x198 <toggle_e>
 30e:	85 e1       	ldi	r24, 0x15	; 21
 310:	8a 95       	dec	r24
 312:	f1 f7       	brne	.-4      	; 0x310 <lcd_init+0x44>
 314:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 316:	5d 98       	cbi	0x0b, 5	; 11
    lcd_e_toggle();
 318:	0e 94 cc 00 	call	0x198	; 0x198 <toggle_e>
 31c:	95 e1       	ldi	r25, 0x15	; 21
 31e:	9a 95       	dec	r25
 320:	f1 f7       	brne	.-4      	; 0x31e <lcd_init+0x52>
 322:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 324:	88 e2       	ldi	r24, 0x28	; 40
 326:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 32a:	88 e0       	ldi	r24, 0x08	; 8
 32c:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 330:	0e 94 39 01 	call	0x272	; 0x272 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 334:	86 e0       	ldi	r24, 0x06	; 6
 336:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 33a:	8c 2f       	mov	r24, r28
 33c:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_command>

}/* lcd_init */
 340:	cf 91       	pop	r28
 342:	08 95       	ret

00000344 <__subsf3>:
 344:	50 58       	subi	r21, 0x80	; 128

00000346 <__addsf3>:
 346:	bb 27       	eor	r27, r27
 348:	aa 27       	eor	r26, r26
 34a:	0e d0       	rcall	.+28     	; 0x368 <__addsf3x>
 34c:	48 c1       	rjmp	.+656    	; 0x5de <__fp_round>
 34e:	39 d1       	rcall	.+626    	; 0x5c2 <__fp_pscA>
 350:	30 f0       	brcs	.+12     	; 0x35e <__addsf3+0x18>
 352:	3e d1       	rcall	.+636    	; 0x5d0 <__fp_pscB>
 354:	20 f0       	brcs	.+8      	; 0x35e <__addsf3+0x18>
 356:	31 f4       	brne	.+12     	; 0x364 <__addsf3+0x1e>
 358:	9f 3f       	cpi	r25, 0xFF	; 255
 35a:	11 f4       	brne	.+4      	; 0x360 <__addsf3+0x1a>
 35c:	1e f4       	brtc	.+6      	; 0x364 <__addsf3+0x1e>
 35e:	2e c1       	rjmp	.+604    	; 0x5bc <__fp_nan>
 360:	0e f4       	brtc	.+2      	; 0x364 <__addsf3+0x1e>
 362:	e0 95       	com	r30
 364:	e7 fb       	bst	r30, 7
 366:	24 c1       	rjmp	.+584    	; 0x5b0 <__fp_inf>

00000368 <__addsf3x>:
 368:	e9 2f       	mov	r30, r25
 36a:	4a d1       	rcall	.+660    	; 0x600 <__fp_split3>
 36c:	80 f3       	brcs	.-32     	; 0x34e <__addsf3+0x8>
 36e:	ba 17       	cp	r27, r26
 370:	62 07       	cpc	r22, r18
 372:	73 07       	cpc	r23, r19
 374:	84 07       	cpc	r24, r20
 376:	95 07       	cpc	r25, r21
 378:	18 f0       	brcs	.+6      	; 0x380 <__addsf3x+0x18>
 37a:	71 f4       	brne	.+28     	; 0x398 <__addsf3x+0x30>
 37c:	9e f5       	brtc	.+102    	; 0x3e4 <__addsf3x+0x7c>
 37e:	62 c1       	rjmp	.+708    	; 0x644 <__fp_zero>
 380:	0e f4       	brtc	.+2      	; 0x384 <__addsf3x+0x1c>
 382:	e0 95       	com	r30
 384:	0b 2e       	mov	r0, r27
 386:	ba 2f       	mov	r27, r26
 388:	a0 2d       	mov	r26, r0
 38a:	0b 01       	movw	r0, r22
 38c:	b9 01       	movw	r22, r18
 38e:	90 01       	movw	r18, r0
 390:	0c 01       	movw	r0, r24
 392:	ca 01       	movw	r24, r20
 394:	a0 01       	movw	r20, r0
 396:	11 24       	eor	r1, r1
 398:	ff 27       	eor	r31, r31
 39a:	59 1b       	sub	r21, r25
 39c:	99 f0       	breq	.+38     	; 0x3c4 <__addsf3x+0x5c>
 39e:	59 3f       	cpi	r21, 0xF9	; 249
 3a0:	50 f4       	brcc	.+20     	; 0x3b6 <__addsf3x+0x4e>
 3a2:	50 3e       	cpi	r21, 0xE0	; 224
 3a4:	68 f1       	brcs	.+90     	; 0x400 <__addsf3x+0x98>
 3a6:	1a 16       	cp	r1, r26
 3a8:	f0 40       	sbci	r31, 0x00	; 0
 3aa:	a2 2f       	mov	r26, r18
 3ac:	23 2f       	mov	r18, r19
 3ae:	34 2f       	mov	r19, r20
 3b0:	44 27       	eor	r20, r20
 3b2:	58 5f       	subi	r21, 0xF8	; 248
 3b4:	f3 cf       	rjmp	.-26     	; 0x39c <__addsf3x+0x34>
 3b6:	46 95       	lsr	r20
 3b8:	37 95       	ror	r19
 3ba:	27 95       	ror	r18
 3bc:	a7 95       	ror	r26
 3be:	f0 40       	sbci	r31, 0x00	; 0
 3c0:	53 95       	inc	r21
 3c2:	c9 f7       	brne	.-14     	; 0x3b6 <__addsf3x+0x4e>
 3c4:	7e f4       	brtc	.+30     	; 0x3e4 <__addsf3x+0x7c>
 3c6:	1f 16       	cp	r1, r31
 3c8:	ba 0b       	sbc	r27, r26
 3ca:	62 0b       	sbc	r22, r18
 3cc:	73 0b       	sbc	r23, r19
 3ce:	84 0b       	sbc	r24, r20
 3d0:	ba f0       	brmi	.+46     	; 0x400 <__addsf3x+0x98>
 3d2:	91 50       	subi	r25, 0x01	; 1
 3d4:	a1 f0       	breq	.+40     	; 0x3fe <__addsf3x+0x96>
 3d6:	ff 0f       	add	r31, r31
 3d8:	bb 1f       	adc	r27, r27
 3da:	66 1f       	adc	r22, r22
 3dc:	77 1f       	adc	r23, r23
 3de:	88 1f       	adc	r24, r24
 3e0:	c2 f7       	brpl	.-16     	; 0x3d2 <__addsf3x+0x6a>
 3e2:	0e c0       	rjmp	.+28     	; 0x400 <__addsf3x+0x98>
 3e4:	ba 0f       	add	r27, r26
 3e6:	62 1f       	adc	r22, r18
 3e8:	73 1f       	adc	r23, r19
 3ea:	84 1f       	adc	r24, r20
 3ec:	48 f4       	brcc	.+18     	; 0x400 <__addsf3x+0x98>
 3ee:	87 95       	ror	r24
 3f0:	77 95       	ror	r23
 3f2:	67 95       	ror	r22
 3f4:	b7 95       	ror	r27
 3f6:	f7 95       	ror	r31
 3f8:	9e 3f       	cpi	r25, 0xFE	; 254
 3fa:	08 f0       	brcs	.+2      	; 0x3fe <__addsf3x+0x96>
 3fc:	b3 cf       	rjmp	.-154    	; 0x364 <__addsf3+0x1e>
 3fe:	93 95       	inc	r25
 400:	88 0f       	add	r24, r24
 402:	08 f0       	brcs	.+2      	; 0x406 <__addsf3x+0x9e>
 404:	99 27       	eor	r25, r25
 406:	ee 0f       	add	r30, r30
 408:	97 95       	ror	r25
 40a:	87 95       	ror	r24
 40c:	08 95       	ret

0000040e <__divsf3>:
 40e:	0c d0       	rcall	.+24     	; 0x428 <__divsf3x>
 410:	e6 c0       	rjmp	.+460    	; 0x5de <__fp_round>
 412:	de d0       	rcall	.+444    	; 0x5d0 <__fp_pscB>
 414:	40 f0       	brcs	.+16     	; 0x426 <__divsf3+0x18>
 416:	d5 d0       	rcall	.+426    	; 0x5c2 <__fp_pscA>
 418:	30 f0       	brcs	.+12     	; 0x426 <__divsf3+0x18>
 41a:	21 f4       	brne	.+8      	; 0x424 <__divsf3+0x16>
 41c:	5f 3f       	cpi	r21, 0xFF	; 255
 41e:	19 f0       	breq	.+6      	; 0x426 <__divsf3+0x18>
 420:	c7 c0       	rjmp	.+398    	; 0x5b0 <__fp_inf>
 422:	51 11       	cpse	r21, r1
 424:	10 c1       	rjmp	.+544    	; 0x646 <__fp_szero>
 426:	ca c0       	rjmp	.+404    	; 0x5bc <__fp_nan>

00000428 <__divsf3x>:
 428:	eb d0       	rcall	.+470    	; 0x600 <__fp_split3>
 42a:	98 f3       	brcs	.-26     	; 0x412 <__divsf3+0x4>

0000042c <__divsf3_pse>:
 42c:	99 23       	and	r25, r25
 42e:	c9 f3       	breq	.-14     	; 0x422 <__divsf3+0x14>
 430:	55 23       	and	r21, r21
 432:	b1 f3       	breq	.-20     	; 0x420 <__divsf3+0x12>
 434:	95 1b       	sub	r25, r21
 436:	55 0b       	sbc	r21, r21
 438:	bb 27       	eor	r27, r27
 43a:	aa 27       	eor	r26, r26
 43c:	62 17       	cp	r22, r18
 43e:	73 07       	cpc	r23, r19
 440:	84 07       	cpc	r24, r20
 442:	38 f0       	brcs	.+14     	; 0x452 <__divsf3_pse+0x26>
 444:	9f 5f       	subi	r25, 0xFF	; 255
 446:	5f 4f       	sbci	r21, 0xFF	; 255
 448:	22 0f       	add	r18, r18
 44a:	33 1f       	adc	r19, r19
 44c:	44 1f       	adc	r20, r20
 44e:	aa 1f       	adc	r26, r26
 450:	a9 f3       	breq	.-22     	; 0x43c <__divsf3_pse+0x10>
 452:	33 d0       	rcall	.+102    	; 0x4ba <__divsf3_pse+0x8e>
 454:	0e 2e       	mov	r0, r30
 456:	3a f0       	brmi	.+14     	; 0x466 <__divsf3_pse+0x3a>
 458:	e0 e8       	ldi	r30, 0x80	; 128
 45a:	30 d0       	rcall	.+96     	; 0x4bc <__divsf3_pse+0x90>
 45c:	91 50       	subi	r25, 0x01	; 1
 45e:	50 40       	sbci	r21, 0x00	; 0
 460:	e6 95       	lsr	r30
 462:	00 1c       	adc	r0, r0
 464:	ca f7       	brpl	.-14     	; 0x458 <__divsf3_pse+0x2c>
 466:	29 d0       	rcall	.+82     	; 0x4ba <__divsf3_pse+0x8e>
 468:	fe 2f       	mov	r31, r30
 46a:	27 d0       	rcall	.+78     	; 0x4ba <__divsf3_pse+0x8e>
 46c:	66 0f       	add	r22, r22
 46e:	77 1f       	adc	r23, r23
 470:	88 1f       	adc	r24, r24
 472:	bb 1f       	adc	r27, r27
 474:	26 17       	cp	r18, r22
 476:	37 07       	cpc	r19, r23
 478:	48 07       	cpc	r20, r24
 47a:	ab 07       	cpc	r26, r27
 47c:	b0 e8       	ldi	r27, 0x80	; 128
 47e:	09 f0       	breq	.+2      	; 0x482 <__divsf3_pse+0x56>
 480:	bb 0b       	sbc	r27, r27
 482:	80 2d       	mov	r24, r0
 484:	bf 01       	movw	r22, r30
 486:	ff 27       	eor	r31, r31
 488:	93 58       	subi	r25, 0x83	; 131
 48a:	5f 4f       	sbci	r21, 0xFF	; 255
 48c:	2a f0       	brmi	.+10     	; 0x498 <__divsf3_pse+0x6c>
 48e:	9e 3f       	cpi	r25, 0xFE	; 254
 490:	51 05       	cpc	r21, r1
 492:	68 f0       	brcs	.+26     	; 0x4ae <__divsf3_pse+0x82>
 494:	8d c0       	rjmp	.+282    	; 0x5b0 <__fp_inf>
 496:	d7 c0       	rjmp	.+430    	; 0x646 <__fp_szero>
 498:	5f 3f       	cpi	r21, 0xFF	; 255
 49a:	ec f3       	brlt	.-6      	; 0x496 <__divsf3_pse+0x6a>
 49c:	98 3e       	cpi	r25, 0xE8	; 232
 49e:	dc f3       	brlt	.-10     	; 0x496 <__divsf3_pse+0x6a>
 4a0:	86 95       	lsr	r24
 4a2:	77 95       	ror	r23
 4a4:	67 95       	ror	r22
 4a6:	b7 95       	ror	r27
 4a8:	f7 95       	ror	r31
 4aa:	9f 5f       	subi	r25, 0xFF	; 255
 4ac:	c9 f7       	brne	.-14     	; 0x4a0 <__divsf3_pse+0x74>
 4ae:	88 0f       	add	r24, r24
 4b0:	91 1d       	adc	r25, r1
 4b2:	96 95       	lsr	r25
 4b4:	87 95       	ror	r24
 4b6:	97 f9       	bld	r25, 7
 4b8:	08 95       	ret
 4ba:	e1 e0       	ldi	r30, 0x01	; 1
 4bc:	66 0f       	add	r22, r22
 4be:	77 1f       	adc	r23, r23
 4c0:	88 1f       	adc	r24, r24
 4c2:	bb 1f       	adc	r27, r27
 4c4:	62 17       	cp	r22, r18
 4c6:	73 07       	cpc	r23, r19
 4c8:	84 07       	cpc	r24, r20
 4ca:	ba 07       	cpc	r27, r26
 4cc:	20 f0       	brcs	.+8      	; 0x4d6 <__divsf3_pse+0xaa>
 4ce:	62 1b       	sub	r22, r18
 4d0:	73 0b       	sbc	r23, r19
 4d2:	84 0b       	sbc	r24, r20
 4d4:	ba 0b       	sbc	r27, r26
 4d6:	ee 1f       	adc	r30, r30
 4d8:	88 f7       	brcc	.-30     	; 0x4bc <__divsf3_pse+0x90>
 4da:	e0 95       	com	r30
 4dc:	08 95       	ret

000004de <__fixunssfsi>:
 4de:	98 d0       	rcall	.+304    	; 0x610 <__fp_splitA>
 4e0:	88 f0       	brcs	.+34     	; 0x504 <__fixunssfsi+0x26>
 4e2:	9f 57       	subi	r25, 0x7F	; 127
 4e4:	90 f0       	brcs	.+36     	; 0x50a <__fixunssfsi+0x2c>
 4e6:	b9 2f       	mov	r27, r25
 4e8:	99 27       	eor	r25, r25
 4ea:	b7 51       	subi	r27, 0x17	; 23
 4ec:	a0 f0       	brcs	.+40     	; 0x516 <__fixunssfsi+0x38>
 4ee:	d1 f0       	breq	.+52     	; 0x524 <__fixunssfsi+0x46>
 4f0:	66 0f       	add	r22, r22
 4f2:	77 1f       	adc	r23, r23
 4f4:	88 1f       	adc	r24, r24
 4f6:	99 1f       	adc	r25, r25
 4f8:	1a f0       	brmi	.+6      	; 0x500 <__fixunssfsi+0x22>
 4fa:	ba 95       	dec	r27
 4fc:	c9 f7       	brne	.-14     	; 0x4f0 <__fixunssfsi+0x12>
 4fe:	12 c0       	rjmp	.+36     	; 0x524 <__fixunssfsi+0x46>
 500:	b1 30       	cpi	r27, 0x01	; 1
 502:	81 f0       	breq	.+32     	; 0x524 <__fixunssfsi+0x46>
 504:	9f d0       	rcall	.+318    	; 0x644 <__fp_zero>
 506:	b1 e0       	ldi	r27, 0x01	; 1
 508:	08 95       	ret
 50a:	9c c0       	rjmp	.+312    	; 0x644 <__fp_zero>
 50c:	67 2f       	mov	r22, r23
 50e:	78 2f       	mov	r23, r24
 510:	88 27       	eor	r24, r24
 512:	b8 5f       	subi	r27, 0xF8	; 248
 514:	39 f0       	breq	.+14     	; 0x524 <__fixunssfsi+0x46>
 516:	b9 3f       	cpi	r27, 0xF9	; 249
 518:	cc f3       	brlt	.-14     	; 0x50c <__fixunssfsi+0x2e>
 51a:	86 95       	lsr	r24
 51c:	77 95       	ror	r23
 51e:	67 95       	ror	r22
 520:	b3 95       	inc	r27
 522:	d9 f7       	brne	.-10     	; 0x51a <__fixunssfsi+0x3c>
 524:	3e f4       	brtc	.+14     	; 0x534 <__fixunssfsi+0x56>
 526:	90 95       	com	r25
 528:	80 95       	com	r24
 52a:	70 95       	com	r23
 52c:	61 95       	neg	r22
 52e:	7f 4f       	sbci	r23, 0xFF	; 255
 530:	8f 4f       	sbci	r24, 0xFF	; 255
 532:	9f 4f       	sbci	r25, 0xFF	; 255
 534:	08 95       	ret

00000536 <__floatunsisf>:
 536:	e8 94       	clt
 538:	09 c0       	rjmp	.+18     	; 0x54c <__floatsisf+0x12>

0000053a <__floatsisf>:
 53a:	97 fb       	bst	r25, 7
 53c:	3e f4       	brtc	.+14     	; 0x54c <__floatsisf+0x12>
 53e:	90 95       	com	r25
 540:	80 95       	com	r24
 542:	70 95       	com	r23
 544:	61 95       	neg	r22
 546:	7f 4f       	sbci	r23, 0xFF	; 255
 548:	8f 4f       	sbci	r24, 0xFF	; 255
 54a:	9f 4f       	sbci	r25, 0xFF	; 255
 54c:	99 23       	and	r25, r25
 54e:	a9 f0       	breq	.+42     	; 0x57a <__floatsisf+0x40>
 550:	f9 2f       	mov	r31, r25
 552:	96 e9       	ldi	r25, 0x96	; 150
 554:	bb 27       	eor	r27, r27
 556:	93 95       	inc	r25
 558:	f6 95       	lsr	r31
 55a:	87 95       	ror	r24
 55c:	77 95       	ror	r23
 55e:	67 95       	ror	r22
 560:	b7 95       	ror	r27
 562:	f1 11       	cpse	r31, r1
 564:	f8 cf       	rjmp	.-16     	; 0x556 <__floatsisf+0x1c>
 566:	fa f4       	brpl	.+62     	; 0x5a6 <__floatsisf+0x6c>
 568:	bb 0f       	add	r27, r27
 56a:	11 f4       	brne	.+4      	; 0x570 <__floatsisf+0x36>
 56c:	60 ff       	sbrs	r22, 0
 56e:	1b c0       	rjmp	.+54     	; 0x5a6 <__floatsisf+0x6c>
 570:	6f 5f       	subi	r22, 0xFF	; 255
 572:	7f 4f       	sbci	r23, 0xFF	; 255
 574:	8f 4f       	sbci	r24, 0xFF	; 255
 576:	9f 4f       	sbci	r25, 0xFF	; 255
 578:	16 c0       	rjmp	.+44     	; 0x5a6 <__floatsisf+0x6c>
 57a:	88 23       	and	r24, r24
 57c:	11 f0       	breq	.+4      	; 0x582 <__floatsisf+0x48>
 57e:	96 e9       	ldi	r25, 0x96	; 150
 580:	11 c0       	rjmp	.+34     	; 0x5a4 <__floatsisf+0x6a>
 582:	77 23       	and	r23, r23
 584:	21 f0       	breq	.+8      	; 0x58e <__floatsisf+0x54>
 586:	9e e8       	ldi	r25, 0x8E	; 142
 588:	87 2f       	mov	r24, r23
 58a:	76 2f       	mov	r23, r22
 58c:	05 c0       	rjmp	.+10     	; 0x598 <__floatsisf+0x5e>
 58e:	66 23       	and	r22, r22
 590:	71 f0       	breq	.+28     	; 0x5ae <__floatsisf+0x74>
 592:	96 e8       	ldi	r25, 0x86	; 134
 594:	86 2f       	mov	r24, r22
 596:	70 e0       	ldi	r23, 0x00	; 0
 598:	60 e0       	ldi	r22, 0x00	; 0
 59a:	2a f0       	brmi	.+10     	; 0x5a6 <__floatsisf+0x6c>
 59c:	9a 95       	dec	r25
 59e:	66 0f       	add	r22, r22
 5a0:	77 1f       	adc	r23, r23
 5a2:	88 1f       	adc	r24, r24
 5a4:	da f7       	brpl	.-10     	; 0x59c <__floatsisf+0x62>
 5a6:	88 0f       	add	r24, r24
 5a8:	96 95       	lsr	r25
 5aa:	87 95       	ror	r24
 5ac:	97 f9       	bld	r25, 7
 5ae:	08 95       	ret

000005b0 <__fp_inf>:
 5b0:	97 f9       	bld	r25, 7
 5b2:	9f 67       	ori	r25, 0x7F	; 127
 5b4:	80 e8       	ldi	r24, 0x80	; 128
 5b6:	70 e0       	ldi	r23, 0x00	; 0
 5b8:	60 e0       	ldi	r22, 0x00	; 0
 5ba:	08 95       	ret

000005bc <__fp_nan>:
 5bc:	9f ef       	ldi	r25, 0xFF	; 255
 5be:	80 ec       	ldi	r24, 0xC0	; 192
 5c0:	08 95       	ret

000005c2 <__fp_pscA>:
 5c2:	00 24       	eor	r0, r0
 5c4:	0a 94       	dec	r0
 5c6:	16 16       	cp	r1, r22
 5c8:	17 06       	cpc	r1, r23
 5ca:	18 06       	cpc	r1, r24
 5cc:	09 06       	cpc	r0, r25
 5ce:	08 95       	ret

000005d0 <__fp_pscB>:
 5d0:	00 24       	eor	r0, r0
 5d2:	0a 94       	dec	r0
 5d4:	12 16       	cp	r1, r18
 5d6:	13 06       	cpc	r1, r19
 5d8:	14 06       	cpc	r1, r20
 5da:	05 06       	cpc	r0, r21
 5dc:	08 95       	ret

000005de <__fp_round>:
 5de:	09 2e       	mov	r0, r25
 5e0:	03 94       	inc	r0
 5e2:	00 0c       	add	r0, r0
 5e4:	11 f4       	brne	.+4      	; 0x5ea <__fp_round+0xc>
 5e6:	88 23       	and	r24, r24
 5e8:	52 f0       	brmi	.+20     	; 0x5fe <__fp_round+0x20>
 5ea:	bb 0f       	add	r27, r27
 5ec:	40 f4       	brcc	.+16     	; 0x5fe <__fp_round+0x20>
 5ee:	bf 2b       	or	r27, r31
 5f0:	11 f4       	brne	.+4      	; 0x5f6 <__fp_round+0x18>
 5f2:	60 ff       	sbrs	r22, 0
 5f4:	04 c0       	rjmp	.+8      	; 0x5fe <__fp_round+0x20>
 5f6:	6f 5f       	subi	r22, 0xFF	; 255
 5f8:	7f 4f       	sbci	r23, 0xFF	; 255
 5fa:	8f 4f       	sbci	r24, 0xFF	; 255
 5fc:	9f 4f       	sbci	r25, 0xFF	; 255
 5fe:	08 95       	ret

00000600 <__fp_split3>:
 600:	57 fd       	sbrc	r21, 7
 602:	90 58       	subi	r25, 0x80	; 128
 604:	44 0f       	add	r20, r20
 606:	55 1f       	adc	r21, r21
 608:	59 f0       	breq	.+22     	; 0x620 <__fp_splitA+0x10>
 60a:	5f 3f       	cpi	r21, 0xFF	; 255
 60c:	71 f0       	breq	.+28     	; 0x62a <__fp_splitA+0x1a>
 60e:	47 95       	ror	r20

00000610 <__fp_splitA>:
 610:	88 0f       	add	r24, r24
 612:	97 fb       	bst	r25, 7
 614:	99 1f       	adc	r25, r25
 616:	61 f0       	breq	.+24     	; 0x630 <__fp_splitA+0x20>
 618:	9f 3f       	cpi	r25, 0xFF	; 255
 61a:	79 f0       	breq	.+30     	; 0x63a <__fp_splitA+0x2a>
 61c:	87 95       	ror	r24
 61e:	08 95       	ret
 620:	12 16       	cp	r1, r18
 622:	13 06       	cpc	r1, r19
 624:	14 06       	cpc	r1, r20
 626:	55 1f       	adc	r21, r21
 628:	f2 cf       	rjmp	.-28     	; 0x60e <__fp_split3+0xe>
 62a:	46 95       	lsr	r20
 62c:	f1 df       	rcall	.-30     	; 0x610 <__fp_splitA>
 62e:	08 c0       	rjmp	.+16     	; 0x640 <__fp_splitA+0x30>
 630:	16 16       	cp	r1, r22
 632:	17 06       	cpc	r1, r23
 634:	18 06       	cpc	r1, r24
 636:	99 1f       	adc	r25, r25
 638:	f1 cf       	rjmp	.-30     	; 0x61c <__fp_splitA+0xc>
 63a:	86 95       	lsr	r24
 63c:	71 05       	cpc	r23, r1
 63e:	61 05       	cpc	r22, r1
 640:	08 94       	sec
 642:	08 95       	ret

00000644 <__fp_zero>:
 644:	e8 94       	clt

00000646 <__fp_szero>:
 646:	bb 27       	eor	r27, r27
 648:	66 27       	eor	r22, r22
 64a:	77 27       	eor	r23, r23
 64c:	cb 01       	movw	r24, r22
 64e:	97 f9       	bld	r25, 7
 650:	08 95       	ret

00000652 <__mulsf3>:
 652:	0b d0       	rcall	.+22     	; 0x66a <__mulsf3x>
 654:	c4 cf       	rjmp	.-120    	; 0x5de <__fp_round>
 656:	b5 df       	rcall	.-150    	; 0x5c2 <__fp_pscA>
 658:	28 f0       	brcs	.+10     	; 0x664 <__mulsf3+0x12>
 65a:	ba df       	rcall	.-140    	; 0x5d0 <__fp_pscB>
 65c:	18 f0       	brcs	.+6      	; 0x664 <__mulsf3+0x12>
 65e:	95 23       	and	r25, r21
 660:	09 f0       	breq	.+2      	; 0x664 <__mulsf3+0x12>
 662:	a6 cf       	rjmp	.-180    	; 0x5b0 <__fp_inf>
 664:	ab cf       	rjmp	.-170    	; 0x5bc <__fp_nan>
 666:	11 24       	eor	r1, r1
 668:	ee cf       	rjmp	.-36     	; 0x646 <__fp_szero>

0000066a <__mulsf3x>:
 66a:	ca df       	rcall	.-108    	; 0x600 <__fp_split3>
 66c:	a0 f3       	brcs	.-24     	; 0x656 <__mulsf3+0x4>

0000066e <__mulsf3_pse>:
 66e:	95 9f       	mul	r25, r21
 670:	d1 f3       	breq	.-12     	; 0x666 <__mulsf3+0x14>
 672:	95 0f       	add	r25, r21
 674:	50 e0       	ldi	r21, 0x00	; 0
 676:	55 1f       	adc	r21, r21
 678:	62 9f       	mul	r22, r18
 67a:	f0 01       	movw	r30, r0
 67c:	72 9f       	mul	r23, r18
 67e:	bb 27       	eor	r27, r27
 680:	f0 0d       	add	r31, r0
 682:	b1 1d       	adc	r27, r1
 684:	63 9f       	mul	r22, r19
 686:	aa 27       	eor	r26, r26
 688:	f0 0d       	add	r31, r0
 68a:	b1 1d       	adc	r27, r1
 68c:	aa 1f       	adc	r26, r26
 68e:	64 9f       	mul	r22, r20
 690:	66 27       	eor	r22, r22
 692:	b0 0d       	add	r27, r0
 694:	a1 1d       	adc	r26, r1
 696:	66 1f       	adc	r22, r22
 698:	82 9f       	mul	r24, r18
 69a:	22 27       	eor	r18, r18
 69c:	b0 0d       	add	r27, r0
 69e:	a1 1d       	adc	r26, r1
 6a0:	62 1f       	adc	r22, r18
 6a2:	73 9f       	mul	r23, r19
 6a4:	b0 0d       	add	r27, r0
 6a6:	a1 1d       	adc	r26, r1
 6a8:	62 1f       	adc	r22, r18
 6aa:	83 9f       	mul	r24, r19
 6ac:	a0 0d       	add	r26, r0
 6ae:	61 1d       	adc	r22, r1
 6b0:	22 1f       	adc	r18, r18
 6b2:	74 9f       	mul	r23, r20
 6b4:	33 27       	eor	r19, r19
 6b6:	a0 0d       	add	r26, r0
 6b8:	61 1d       	adc	r22, r1
 6ba:	23 1f       	adc	r18, r19
 6bc:	84 9f       	mul	r24, r20
 6be:	60 0d       	add	r22, r0
 6c0:	21 1d       	adc	r18, r1
 6c2:	82 2f       	mov	r24, r18
 6c4:	76 2f       	mov	r23, r22
 6c6:	6a 2f       	mov	r22, r26
 6c8:	11 24       	eor	r1, r1
 6ca:	9f 57       	subi	r25, 0x7F	; 127
 6cc:	50 40       	sbci	r21, 0x00	; 0
 6ce:	8a f0       	brmi	.+34     	; 0x6f2 <__mulsf3_pse+0x84>
 6d0:	e1 f0       	breq	.+56     	; 0x70a <__mulsf3_pse+0x9c>
 6d2:	88 23       	and	r24, r24
 6d4:	4a f0       	brmi	.+18     	; 0x6e8 <__mulsf3_pse+0x7a>
 6d6:	ee 0f       	add	r30, r30
 6d8:	ff 1f       	adc	r31, r31
 6da:	bb 1f       	adc	r27, r27
 6dc:	66 1f       	adc	r22, r22
 6de:	77 1f       	adc	r23, r23
 6e0:	88 1f       	adc	r24, r24
 6e2:	91 50       	subi	r25, 0x01	; 1
 6e4:	50 40       	sbci	r21, 0x00	; 0
 6e6:	a9 f7       	brne	.-22     	; 0x6d2 <__mulsf3_pse+0x64>
 6e8:	9e 3f       	cpi	r25, 0xFE	; 254
 6ea:	51 05       	cpc	r21, r1
 6ec:	70 f0       	brcs	.+28     	; 0x70a <__mulsf3_pse+0x9c>
 6ee:	60 cf       	rjmp	.-320    	; 0x5b0 <__fp_inf>
 6f0:	aa cf       	rjmp	.-172    	; 0x646 <__fp_szero>
 6f2:	5f 3f       	cpi	r21, 0xFF	; 255
 6f4:	ec f3       	brlt	.-6      	; 0x6f0 <__mulsf3_pse+0x82>
 6f6:	98 3e       	cpi	r25, 0xE8	; 232
 6f8:	dc f3       	brlt	.-10     	; 0x6f0 <__mulsf3_pse+0x82>
 6fa:	86 95       	lsr	r24
 6fc:	77 95       	ror	r23
 6fe:	67 95       	ror	r22
 700:	b7 95       	ror	r27
 702:	f7 95       	ror	r31
 704:	e7 95       	ror	r30
 706:	9f 5f       	subi	r25, 0xFF	; 255
 708:	c1 f7       	brne	.-16     	; 0x6fa <__mulsf3_pse+0x8c>
 70a:	fe 2b       	or	r31, r30
 70c:	88 0f       	add	r24, r24
 70e:	91 1d       	adc	r25, r1
 710:	96 95       	lsr	r25
 712:	87 95       	ror	r24
 714:	97 f9       	bld	r25, 7
 716:	08 95       	ret

00000718 <__itoa_ncheck>:
 718:	bb 27       	eor	r27, r27
 71a:	4a 30       	cpi	r20, 0x0A	; 10
 71c:	31 f4       	brne	.+12     	; 0x72a <__itoa_ncheck+0x12>
 71e:	99 23       	and	r25, r25
 720:	22 f4       	brpl	.+8      	; 0x72a <__itoa_ncheck+0x12>
 722:	bd e2       	ldi	r27, 0x2D	; 45
 724:	90 95       	com	r25
 726:	81 95       	neg	r24
 728:	9f 4f       	sbci	r25, 0xFF	; 255
 72a:	0c 94 98 03 	jmp	0x730	; 0x730 <__utoa_common>

0000072e <__utoa_ncheck>:
 72e:	bb 27       	eor	r27, r27

00000730 <__utoa_common>:
 730:	fb 01       	movw	r30, r22
 732:	55 27       	eor	r21, r21
 734:	aa 27       	eor	r26, r26
 736:	88 0f       	add	r24, r24
 738:	99 1f       	adc	r25, r25
 73a:	aa 1f       	adc	r26, r26
 73c:	a4 17       	cp	r26, r20
 73e:	10 f0       	brcs	.+4      	; 0x744 <__utoa_common+0x14>
 740:	a4 1b       	sub	r26, r20
 742:	83 95       	inc	r24
 744:	50 51       	subi	r21, 0x10	; 16
 746:	b9 f7       	brne	.-18     	; 0x736 <__utoa_common+0x6>
 748:	a0 5d       	subi	r26, 0xD0	; 208
 74a:	aa 33       	cpi	r26, 0x3A	; 58
 74c:	08 f0       	brcs	.+2      	; 0x750 <__utoa_common+0x20>
 74e:	a9 5d       	subi	r26, 0xD9	; 217
 750:	a1 93       	st	Z+, r26
 752:	00 97       	sbiw	r24, 0x00	; 0
 754:	79 f7       	brne	.-34     	; 0x734 <__utoa_common+0x4>
 756:	b1 11       	cpse	r27, r1
 758:	b1 93       	st	Z+, r27
 75a:	11 92       	st	Z+, r1
 75c:	cb 01       	movw	r24, r22
 75e:	0c 94 b1 03 	jmp	0x762	; 0x762 <strrev>

00000762 <strrev>:
 762:	dc 01       	movw	r26, r24
 764:	fc 01       	movw	r30, r24
 766:	67 2f       	mov	r22, r23
 768:	71 91       	ld	r23, Z+
 76a:	77 23       	and	r23, r23
 76c:	e1 f7       	brne	.-8      	; 0x766 <strrev+0x4>
 76e:	32 97       	sbiw	r30, 0x02	; 2
 770:	04 c0       	rjmp	.+8      	; 0x77a <strrev+0x18>
 772:	7c 91       	ld	r23, X
 774:	6d 93       	st	X+, r22
 776:	70 83       	st	Z, r23
 778:	62 91       	ld	r22, -Z
 77a:	ae 17       	cp	r26, r30
 77c:	bf 07       	cpc	r27, r31
 77e:	c8 f3       	brcs	.-14     	; 0x772 <strrev+0x10>
 780:	08 95       	ret

00000782 <_exit>:
 782:	f8 94       	cli

00000784 <__stop_program>:
 784:	ff cf       	rjmp	.-2      	; 0x784 <__stop_program>
