
AVR28PWMAyarlanabilir.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000012a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000012a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000714  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066d  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ae  00000000  00000000  00000f3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000011ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a8  00000000  00000000  00001210  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006c  00000000  00000000  000015b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001624  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define  F_CPU 16000000UL
#include <util/delay.h>

int main(void)
{
	DDRD |= (1 << PD6);
  80:	56 9a       	sbi	0x0a, 6	; 10
    OCR0A = 200;
  82:	88 ec       	ldi	r24, 0xC8	; 200
  84:	87 bd       	out	0x27, r24	; 39
	TCCR0A |= (1 << COM0A1);
  86:	84 b5       	in	r24, 0x24	; 36
  88:	80 68       	ori	r24, 0x80	; 128
  8a:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << WGM00);
  8c:	84 b5       	in	r24, 0x24	; 36
  8e:	81 60       	ori	r24, 0x01	; 1
  90:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS01);
  92:	85 b5       	in	r24, 0x25	; 37
  94:	82 60       	ori	r24, 0x02	; 2
  96:	85 bd       	out	0x25, r24	; 37
	while (1)
	{
    for (int i = 0 ; i < 256 ; i++)
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	90 e0       	ldi	r25, 0x00	; 0
	{
	TCCR0A = 0;
  9c:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
  9e:	15 bc       	out	0x25, r1	; 37
	OCR0A = i;
  a0:	87 bd       	out	0x27, r24	; 39
	TCCR0A |= (1 << COM0A1);
  a2:	24 b5       	in	r18, 0x24	; 36
  a4:	20 68       	ori	r18, 0x80	; 128
  a6:	24 bd       	out	0x24, r18	; 36
	TCCR0A |= (1 << WGM00);
  a8:	24 b5       	in	r18, 0x24	; 36
  aa:	21 60       	ori	r18, 0x01	; 1
  ac:	24 bd       	out	0x24, r18	; 36
	TCCR0B |= (1 << CS01);
  ae:	25 b5       	in	r18, 0x25	; 37
  b0:	22 60       	ori	r18, 0x02	; 2
  b2:	25 bd       	out	0x25, r18	; 37
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	2f ef       	ldi	r18, 0xFF	; 255
  b6:	39 ef       	ldi	r19, 0xF9	; 249
  b8:	40 e0       	ldi	r20, 0x00	; 0
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	30 40       	sbci	r19, 0x00	; 0
  be:	40 40       	sbci	r20, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x3a>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x44>
  c4:	00 00       	nop
	TCCR0A |= (1 << COM0A1);
	TCCR0A |= (1 << WGM00);
	TCCR0B |= (1 << CS01);
	while (1)
	{
    for (int i = 0 ; i < 256 ; i++)
  c6:	01 96       	adiw	r24, 0x01	; 1
  c8:	81 15       	cp	r24, r1
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	92 07       	cpc	r25, r18
  ce:	31 f7       	brne	.-52     	; 0x9c <main+0x1c>
  d0:	e3 cf       	rjmp	.-58     	; 0x98 <main+0x18>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>
