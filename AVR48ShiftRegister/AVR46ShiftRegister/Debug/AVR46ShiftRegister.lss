
AVR46ShiftRegister.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000773  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006dd  00000000  00000000  0000092f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c0  00000000  00000000  0000100c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000012cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003bd  00000000  00000000  00001310  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000005c  00000000  00000000  000016cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001729  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  78:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <spi_init>:
}

void spi_init(void)
{
	/* MOSI ve SCK Çýkýþ, Diðerleri Giriþ*/
	DDRB |= (1<<DDB3)|(1<<DDB5);
  80:	84 b1       	in	r24, 0x04	; 4
  82:	88 62       	ori	r24, 0x28	; 40
  84:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<DDB2); // SS ÇIKIÞ ÖNEMLÝ
  86:	22 9a       	sbi	0x04, 2	; 4
	/*SPI Enable, Master Mod, Fcpu/16*/
	SPCR |= ((1<<SPE)|(1<<MSTR)|(1<<SPR0));
  88:	8c b5       	in	r24, 0x2c	; 44
  8a:	81 65       	ori	r24, 0x51	; 81
  8c:	8c bd       	out	0x2c, r24	; 44
  8e:	08 95       	ret

00000090 <spi_transmit>:
}

void spi_transmit(unsigned char data)
{
	/* Veriyi Yolla*/
	SPDR = data;
  90:	8e bd       	out	0x2e, r24	; 46
	/* Bitmesini Bekle */
	while(!(SPSR & (1<<SPIF)))
  92:	0d b4       	in	r0, 0x2d	; 45
  94:	07 fe       	sbrs	r0, 7
  96:	fd cf       	rjmp	.-6      	; 0x92 <spi_transmit+0x2>
	;
	
  98:	08 95       	ret

0000009a <main>:
void spi_init(void);
#define  F_CPU 16000000UL
#include <util/delay.h>
int main(void)
{
	spi_init();
  9a:	0e 94 40 00 	call	0x80	; 0x80 <spi_init>
void spi_transmit(unsigned char data);
void spi_init(void);
#define  F_CPU 16000000UL
#include <util/delay.h>
int main(void)
{
  9e:	c0 e0       	ldi	r28, 0x00	; 0
		PORTB |= (1<<PORTB2);
		_delay_ms(500);
		*/
		for (int i = 0; i<255; i++)
		{
			PORTB &= ~(1<<PORTB2);
  a0:	2a 98       	cbi	0x05, 2	; 5
			spi_transmit(i);
  a2:	8c 2f       	mov	r24, r28
  a4:	0e 94 48 00 	call	0x90	; 0x90 <spi_transmit>
			PORTB |= (1<<PORTB2);
  a8:	2a 9a       	sbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	2f ef       	ldi	r18, 0xFF	; 255
  ac:	87 ee       	ldi	r24, 0xE7	; 231
  ae:	93 e0       	ldi	r25, 0x03	; 3
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	80 40       	sbci	r24, 0x00	; 0
  b4:	90 40       	sbci	r25, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <main+0x16>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x20>
  ba:	00 00       	nop
  bc:	cf 5f       	subi	r28, 0xFF	; 255
		PORTB &= ~(1<<PORTB2);
		spi_transmit(0x00);
		PORTB |= (1<<PORTB2);
		_delay_ms(500);
		*/
		for (int i = 0; i<255; i++)
  be:	cf 3f       	cpi	r28, 0xFF	; 255
  c0:	79 f7       	brne	.-34     	; 0xa0 <main+0x6>
  c2:	ed cf       	rjmp	.-38     	; 0x9e <main+0x4>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
