
AVR49MasterSendLibrary.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000154  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000971  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000077d  00000000  00000000  00000c01  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000551  00000000  00000000  0000137e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c4  00000000  00000000  000018d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000428  00000000  00000000  00001994  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001bd  00000000  00000000  00001dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001f79  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 a8 00 	jmp	0x150	; 0x150 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include "i2cmaster.h"
#define F_CPU 16000000UL
#include <util/delay.h>
int main(void)
{
    i2c_init();
  80:	0e 94 60 00 	call	0xc0	; 0xc0 <i2c_init>
	
    while (1) 
    {
		i2c_start(0x3F << 1);
  84:	8e e7       	ldi	r24, 0x7E	; 126
  86:	0e 94 66 00 	call	0xcc	; 0xcc <i2c_start>
		i2c_write(0xFF);
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	0e 94 96 00 	call	0x12c	; 0x12c <i2c_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	2f ef       	ldi	r18, 0xFF	; 255
  92:	89 e6       	ldi	r24, 0x69	; 105
  94:	98 e1       	ldi	r25, 0x18	; 24
  96:	21 50       	subi	r18, 0x01	; 1
  98:	80 40       	sbci	r24, 0x00	; 0
  9a:	90 40       	sbci	r25, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <main+0x16>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <main+0x20>
  a0:	00 00       	nop
		_delay_ms(500);
		i2c_write(0x00);
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	0e 94 96 00 	call	0x12c	; 0x12c <i2c_write>
  a8:	2f ef       	ldi	r18, 0xFF	; 255
  aa:	89 e6       	ldi	r24, 0x69	; 105
  ac:	98 e1       	ldi	r25, 0x18	; 24
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	80 40       	sbci	r24, 0x00	; 0
  b2:	90 40       	sbci	r25, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x2e>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x38>
  b8:	00 00       	nop
		_delay_ms(500);
		i2c_stop();
  ba:	0e 94 8d 00 	call	0x11a	; 0x11a <i2c_stop>
  be:	e2 cf       	rjmp	.-60     	; 0x84 <main+0x4>

000000c0 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
  c0:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  c4:	88 e4       	ldi	r24, 0x48	; 72
  c6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
  ca:	08 95       	ret

000000cc <i2c_start>:
  cc:	94 ea       	ldi	r25, 0xA4	; 164
  ce:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  d2:	ec eb       	ldi	r30, 0xBC	; 188
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	90 81       	ld	r25, Z
  d8:	99 23       	and	r25, r25
  da:	ec f7       	brge	.-6      	; 0xd6 <i2c_start+0xa>
  dc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  e0:	98 7f       	andi	r25, 0xF8	; 248
  e2:	98 30       	cpi	r25, 0x08	; 8
  e4:	11 f0       	breq	.+4      	; 0xea <i2c_start+0x1e>
  e6:	90 31       	cpi	r25, 0x10	; 16
  e8:	a1 f4       	brne	.+40     	; 0x112 <i2c_start+0x46>
  ea:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
  ee:	84 e8       	ldi	r24, 0x84	; 132
  f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  f4:	ec eb       	ldi	r30, 0xBC	; 188
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	88 23       	and	r24, r24
  fc:	ec f7       	brge	.-6      	; 0xf8 <i2c_start+0x2c>
  fe:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 102:	98 7f       	andi	r25, 0xF8	; 248
 104:	98 31       	cpi	r25, 0x18	; 24
 106:	39 f0       	breq	.+14     	; 0x116 <i2c_start+0x4a>
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 34       	cpi	r25, 0x40	; 64
 10c:	29 f4       	brne	.+10     	; 0x118 <i2c_start+0x4c>
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	08 95       	ret
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	08 95       	ret
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	08 95       	ret

0000011a <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 11a:	84 e9       	ldi	r24, 0x94	; 148
 11c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 120:	ec eb       	ldi	r30, 0xBC	; 188
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	84 fd       	sbrc	r24, 4
 128:	fd cf       	rjmp	.-6      	; 0x124 <i2c_stop+0xa>

}/* i2c_stop */
 12a:	08 95       	ret

0000012c <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 12c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);
 130:	84 e8       	ldi	r24, 0x84	; 132
 132:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 136:	ec eb       	ldi	r30, 0xBC	; 188
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	88 23       	and	r24, r24
 13e:	ec f7       	brge	.-6      	; 0x13a <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 140:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 144:	98 7f       	andi	r25, 0xF8	; 248
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	98 32       	cpi	r25, 0x28	; 40
 14a:	09 f4       	brne	.+2      	; 0x14e <i2c_write+0x22>
 14c:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
 14e:	08 95       	ret

00000150 <_exit>:
 150:	f8 94       	cli

00000152 <__stop_program>:
 152:	ff cf       	rjmp	.-2      	; 0x152 <__stop_program>
