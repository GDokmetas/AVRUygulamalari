
AVR44SPIUydu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006dc  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000064f  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000252  00000000  00000000  00000eeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001140  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000367  00000000  00000000  00001184  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000001e  00000000  00000000  000014eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001509  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 49 00 	call	0x92	; 0x92 <main>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <spi_slaveinit>:


void spi_slaveinit(void)
{
	/* Set MISO output, all others input */
	DDRB |= (1<<DDD4);
  80:	24 9a       	sbi	0x04, 4	; 4
	/* Enable SPI */
	SPCR = (1<<SPE);
  82:	80 e4       	ldi	r24, 0x40	; 64
  84:	8c bd       	out	0x2c, r24	; 44
  86:	08 95       	ret

00000088 <spi_read>:
}
unsigned char spi_read(void)
{
	/* Wait for reception complete */
	while(!(SPSR & (1<<SPIF)))
  88:	0d b4       	in	r0, 0x2d	; 45
  8a:	07 fe       	sbrs	r0, 7
  8c:	fd cf       	rjmp	.-6      	; 0x88 <spi_read>
	;
	/* Return Data Register */
	return SPDR;
  8e:	8e b5       	in	r24, 0x2e	; 46
  90:	08 95       	ret

00000092 <main>:
#include <avr/io.h>
void spi_slaveinit(void);
unsigned char spi_read(void);
int main(void)
{
    DDRD |= ((1<<PORTD2) | (1<<PORTD4));
  92:	8a b1       	in	r24, 0x0a	; 10
  94:	84 61       	ori	r24, 0x14	; 20
  96:	8a b9       	out	0x0a, r24	; 10
	DDRD |=((1<<PORTD3) |(1<<PORTD5));
  98:	8a b1       	in	r24, 0x0a	; 10
  9a:	88 62       	ori	r24, 0x28	; 40
  9c:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~((1<<PORTD3)|(1<<PORTD5));
  9e:	8b b1       	in	r24, 0x0b	; 11
  a0:	87 7d       	andi	r24, 0xD7	; 215
  a2:	8b b9       	out	0x0b, r24	; 11
	spi_slaveinit();
  a4:	0e 94 40 00 	call	0x80	; 0x80 <spi_slaveinit>
    while (1) 
    {
		unsigned char data = spi_read();
	    if (data == '1')
		PORTD ^= (1<<PORTD2);
  a8:	c4 e0       	ldi	r28, 0x04	; 4
		if (data == '2')
		PORTD ^= (1<<PORTD4);
  aa:	d0 e1       	ldi	r29, 0x10	; 16
	DDRD |=((1<<PORTD3) |(1<<PORTD5));
	PORTD &= ~((1<<PORTD3)|(1<<PORTD5));
	spi_slaveinit();
    while (1) 
    {
		unsigned char data = spi_read();
  ac:	0e 94 44 00 	call	0x88	; 0x88 <spi_read>
	    if (data == '1')
  b0:	81 33       	cpi	r24, 0x31	; 49
  b2:	21 f4       	brne	.+8      	; 0xbc <main+0x2a>
		PORTD ^= (1<<PORTD2);
  b4:	8b b1       	in	r24, 0x0b	; 11
  b6:	8c 27       	eor	r24, r28
  b8:	8b b9       	out	0x0b, r24	; 11
  ba:	f8 cf       	rjmp	.-16     	; 0xac <main+0x1a>
		if (data == '2')
  bc:	82 33       	cpi	r24, 0x32	; 50
  be:	b1 f7       	brne	.-20     	; 0xac <main+0x1a>
		PORTD ^= (1<<PORTD4);
  c0:	8b b1       	in	r24, 0x0b	; 11
  c2:	8d 27       	eor	r24, r29
  c4:	8b b9       	out	0x0b, r24	; 11
  c6:	f2 cf       	rjmp	.-28     	; 0xac <main+0x1a>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
