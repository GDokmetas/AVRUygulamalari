
AVR6Karasimsek.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000012e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000da  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000012e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000736  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066f  00000000  00000000  000008f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000276  00000000  00000000  00000f65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000011dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a0  00000000  00000000  00001200  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  000015a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001630  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>

int main(void)
{
	
DDRD = 0xFF;                    
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8a b9       	out	0x0a, r24	; 10
while (1) {                      
	
	for (PORTD = 0x01; PORTD != 0; PORTD <<= 1)
  84:	21 e0       	ldi	r18, 0x01	; 1
	_delay_ms(50);           
	
	for (PORTD = 0x80; PORTD != 0; PORTD >>= 1)
  86:	90 e8       	ldi	r25, 0x80	; 128
{
	
DDRD = 0xFF;                    
while (1) {                      
	
	for (PORTD = 0x01; PORTD != 0; PORTD <<= 1)
  88:	2b b9       	out	0x0b, r18	; 11
  8a:	8b b1       	in	r24, 0x0b	; 11
  8c:	88 23       	and	r24, r24
  8e:	79 f0       	breq	.+30     	; 0xae <main+0x2e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	3f ef       	ldi	r19, 0xFF	; 255
  92:	40 e7       	ldi	r20, 0x70	; 112
  94:	82 e0       	ldi	r24, 0x02	; 2
  96:	31 50       	subi	r19, 0x01	; 1
  98:	40 40       	sbci	r20, 0x00	; 0
  9a:	80 40       	sbci	r24, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <main+0x16>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <main+0x20>
  a0:	00 00       	nop
  a2:	8b b1       	in	r24, 0x0b	; 11
  a4:	88 0f       	add	r24, r24
  a6:	8b b9       	out	0x0b, r24	; 11
  a8:	8b b1       	in	r24, 0x0b	; 11
  aa:	81 11       	cpse	r24, r1
  ac:	f1 cf       	rjmp	.-30     	; 0x90 <main+0x10>
	_delay_ms(50);           
	
	for (PORTD = 0x80; PORTD != 0; PORTD >>= 1)
  ae:	9b b9       	out	0x0b, r25	; 11
  b0:	8b b1       	in	r24, 0x0b	; 11
  b2:	88 23       	and	r24, r24
  b4:	49 f3       	breq	.-46     	; 0x88 <main+0x8>
  b6:	3f ef       	ldi	r19, 0xFF	; 255
  b8:	40 e7       	ldi	r20, 0x70	; 112
  ba:	82 e0       	ldi	r24, 0x02	; 2
  bc:	31 50       	subi	r19, 0x01	; 1
  be:	40 40       	sbci	r20, 0x00	; 0
  c0:	80 40       	sbci	r24, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x3c>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x46>
  c6:	00 00       	nop
  c8:	8b b1       	in	r24, 0x0b	; 11
  ca:	86 95       	lsr	r24
  cc:	8b b9       	out	0x0b, r24	; 11
  ce:	8b b1       	in	r24, 0x0b	; 11
  d0:	81 11       	cpse	r24, r1
  d2:	f1 cf       	rjmp	.-30     	; 0xb6 <main+0x36>
  d4:	d9 cf       	rjmp	.-78     	; 0x88 <main+0x8>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>
