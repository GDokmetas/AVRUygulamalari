
AVR19UART_Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  000001ea  0000025e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000086e  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000074a  00000000  00000000  00000bc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000379  00000000  00000000  0000130c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  00001688  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040f  00000000  00000000  00001740  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000138  00000000  00000000  00001b4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001c87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__vector_18>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__vector_20>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ee       	ldi	r30, 0xEA	; 234
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 33       	cpi	r26, 0x36	; 54
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 7b 00 	call	0xf6	; 0xf6 <main>
  8e:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <uart_basla>:
}

uint8_t uart_oku(){
	while(!(UCSR0A & (1<<RXC0)));
	return UDR0;
}
  96:	9b 01       	movw	r18, r22
  98:	ac 01       	movw	r20, r24
  9a:	60 e4       	ldi	r22, 0x40	; 64
  9c:	72 e4       	ldi	r23, 0x42	; 66
  9e:	8f e0       	ldi	r24, 0x0F	; 15
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <__udivmodsi4>
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	31 09       	sbc	r19, r1
  aa:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  ae:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  b2:	e1 ec       	ldi	r30, 0xC1	; 193
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	88 61       	ori	r24, 0x18	; 24
  ba:	80 83       	st	Z, r24
  bc:	e2 ec       	ldi	r30, 0xC2	; 194
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	86 60       	ori	r24, 0x06	; 6
  c4:	80 83       	st	Z, r24
  c6:	08 95       	ret

000000c8 <uart_gonder>:
  c8:	e0 ec       	ldi	r30, 0xC0	; 192
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	90 81       	ld	r25, Z
  ce:	95 ff       	sbrs	r25, 5
  d0:	fd cf       	rjmp	.-6      	; 0xcc <uart_gonder+0x4>
  d2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  d6:	08 95       	ret

000000d8 <uart_string>:

void uart_string(const char *s )
{
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	ec 01       	movw	r28, r24
	while (*s)
  de:	88 81       	ld	r24, Y
  e0:	88 23       	and	r24, r24
  e2:	31 f0       	breq	.+12     	; 0xf0 <uart_string+0x18>
  e4:	21 96       	adiw	r28, 0x01	; 1
	uart_gonder(*s++);
  e6:	0e 94 64 00 	call	0xc8	; 0xc8 <uart_gonder>
	return UDR0;
}

void uart_string(const char *s )
{
	while (*s)
  ea:	89 91       	ld	r24, Y+
  ec:	81 11       	cpse	r24, r1
  ee:	fb cf       	rjmp	.-10     	; 0xe6 <uart_string+0xe>
	uart_gonder(*s++);

}
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <main>:
void uart_string(const char *s );
uint8_t uart_oku();
int main(void)
{
	
	uart_basla(9600);
  f6:	60 e8       	ldi	r22, 0x80	; 128
  f8:	75 e2       	ldi	r23, 0x25	; 37
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 4b 00 	call	0x96	; 0x96 <uart_basla>
	UCSR0B |= (1<<RXCIE0);
 102:	e1 ec       	ldi	r30, 0xC1	; 193
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	80 68       	ori	r24, 0x80	; 128
 10a:	80 83       	st	Z, r24
	UCSR0B |= (1<<TXCIE0);
 10c:	80 81       	ld	r24, Z
 10e:	80 64       	ori	r24, 0x40	; 64
 110:	80 83       	st	Z, r24
	sei();
 112:	78 94       	sei
	DDRD &=~ ( (1<<PD2) | (1<<PD3) | (1<<PD4) );
 114:	8a b1       	in	r24, 0x0a	; 10
 116:	83 7e       	andi	r24, 0xE3	; 227
 118:	8a b9       	out	0x0a, r24	; 10
	// PORTD |= ((1<<PD2) | (1<<PD3) | (1<<PD4));
	PORTD = 0b11100;
 11a:	8c e1       	ldi	r24, 0x1C	; 28
 11c:	8b b9       	out	0x0b, r24	; 11
	DDRD |= (1<<PD5);
 11e:	55 9a       	sbi	0x0a, 5	; 10
	DDRD |= (1<<PD6);
 120:	56 9a       	sbi	0x0a, 6	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 122:	2f ef       	ldi	r18, 0xFF	; 255
 124:	81 ee       	ldi	r24, 0xE1	; 225
 126:	94 e0       	ldi	r25, 0x04	; 4
 128:	21 50       	subi	r18, 0x01	; 1
 12a:	80 40       	sbci	r24, 0x00	; 0
 12c:	90 40       	sbci	r25, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <main+0x32>
 130:	00 c0       	rjmp	.+0      	; 0x132 <main+0x3c>
 132:	00 00       	nop
	_delay_ms(100); // MCU Kendine Gelsin
	while (1)
	{
		if (!(PIND & (1<<PD2)))
 134:	4a 99       	sbic	0x09, 2	; 9
 136:	04 c0       	rjmp	.+8      	; 0x140 <main+0x4a>
		uart_string("1. Dugme Basili \n");
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	91 e0       	ldi	r25, 0x01	; 1
 13c:	0e 94 6c 00 	call	0xd8	; 0xd8 <uart_string>
		if (!(PIND & (1<<PD3)))
 140:	4b 99       	sbic	0x09, 3	; 9
 142:	04 c0       	rjmp	.+8      	; 0x14c <main+0x56>
		uart_string("2. Dugme Basili \n");
 144:	82 e1       	ldi	r24, 0x12	; 18
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	0e 94 6c 00 	call	0xd8	; 0xd8 <uart_string>
		if (!(PIND & (1<<PD4)))
 14c:	4c 99       	sbic	0x09, 4	; 9
 14e:	f2 cf       	rjmp	.-28     	; 0x134 <main+0x3e>
		uart_string("3. Dugme Basili \n");
 150:	84 e2       	ldi	r24, 0x24	; 36
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	0e 94 6c 00 	call	0xd8	; 0xd8 <uart_string>
 158:	ed cf       	rjmp	.-38     	; 0x134 <main+0x3e>

0000015a <__vector_18>:
	uart_gonder(*s++);

}
	
ISR (USART_RX_vect)
	{
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	8f 93       	push	r24
 166:	9f 93       	push	r25
		PORTD ^= (1<<PD5);
 168:	9b b1       	in	r25, 0x0b	; 11
 16a:	80 e2       	ldi	r24, 0x20	; 32
 16c:	89 27       	eor	r24, r25
 16e:	8b b9       	out	0x0b, r24	; 11
	}
 170:	9f 91       	pop	r25
 172:	8f 91       	pop	r24
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <__vector_20>:

ISR (USART_TX_vect)
	{
 17e:	1f 92       	push	r1
 180:	0f 92       	push	r0
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	0f 92       	push	r0
 186:	11 24       	eor	r1, r1
 188:	8f 93       	push	r24
 18a:	9f 93       	push	r25
		PORTD ^= (1<<PD6);
 18c:	9b b1       	in	r25, 0x0b	; 11
 18e:	80 e4       	ldi	r24, 0x40	; 64
 190:	89 27       	eor	r24, r25
 192:	8b b9       	out	0x0b, r24	; 11
	}
 194:	9f 91       	pop	r25
 196:	8f 91       	pop	r24
 198:	0f 90       	pop	r0
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	0f 90       	pop	r0
 19e:	1f 90       	pop	r1
 1a0:	18 95       	reti

000001a2 <__udivmodsi4>:
 1a2:	a1 e2       	ldi	r26, 0x21	; 33
 1a4:	1a 2e       	mov	r1, r26
 1a6:	aa 1b       	sub	r26, r26
 1a8:	bb 1b       	sub	r27, r27
 1aa:	fd 01       	movw	r30, r26
 1ac:	0d c0       	rjmp	.+26     	; 0x1c8 <__udivmodsi4_ep>

000001ae <__udivmodsi4_loop>:
 1ae:	aa 1f       	adc	r26, r26
 1b0:	bb 1f       	adc	r27, r27
 1b2:	ee 1f       	adc	r30, r30
 1b4:	ff 1f       	adc	r31, r31
 1b6:	a2 17       	cp	r26, r18
 1b8:	b3 07       	cpc	r27, r19
 1ba:	e4 07       	cpc	r30, r20
 1bc:	f5 07       	cpc	r31, r21
 1be:	20 f0       	brcs	.+8      	; 0x1c8 <__udivmodsi4_ep>
 1c0:	a2 1b       	sub	r26, r18
 1c2:	b3 0b       	sbc	r27, r19
 1c4:	e4 0b       	sbc	r30, r20
 1c6:	f5 0b       	sbc	r31, r21

000001c8 <__udivmodsi4_ep>:
 1c8:	66 1f       	adc	r22, r22
 1ca:	77 1f       	adc	r23, r23
 1cc:	88 1f       	adc	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	1a 94       	dec	r1
 1d2:	69 f7       	brne	.-38     	; 0x1ae <__udivmodsi4_loop>
 1d4:	60 95       	com	r22
 1d6:	70 95       	com	r23
 1d8:	80 95       	com	r24
 1da:	90 95       	com	r25
 1dc:	9b 01       	movw	r18, r22
 1de:	ac 01       	movw	r20, r24
 1e0:	bd 01       	movw	r22, r26
 1e2:	cf 01       	movw	r24, r30
 1e4:	08 95       	ret

000001e6 <_exit>:
 1e6:	f8 94       	cli

000001e8 <__stop_program>:
 1e8:	ff cf       	rjmp	.-2      	; 0x1e8 <__stop_program>
