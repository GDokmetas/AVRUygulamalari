
AVRI2CLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000002a2  00000336  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010e  0080010e  00000344  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000374  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f1f  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d3  00000000  00000000  00001393  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005f2  00000000  00000000  00001c66  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  00002258  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b1  00000000  00000000  000023bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000664  00000000  00000000  0000286d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002ed1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ea       	ldi	r30, 0xA2	; 162
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 30       	cpi	r26, 0x0F	; 15
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 48 01 	call	0x290	; 0x290 <main>
  9e:	0c 94 4f 01 	jmp	0x29e	; 0x29e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <i2c_init>:
    while ((TWCR & (1 << TWINT)) == 0);
}

void i2c_stop_condition(void)
{
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
  ac:	08 95       	ret

000000ae <i2c_start_condition>:
  ae:	84 ea       	ldi	r24, 0xA4	; 164
  b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  b4:	ec eb       	ldi	r30, 0xBC	; 188
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	88 23       	and	r24, r24
  bc:	ec f7       	brge	.-6      	; 0xb8 <i2c_start_condition+0xa>
  be:	08 95       	ret

000000c0 <i2c_send_byte>:
}

void i2c_send_byte(unsigned char byte)
{
	TWDR = byte;
  c0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    TWCR = (1 << TWINT) | (1 << TWEN);
  c4:	84 e8       	ldi	r24, 0x84	; 132
  c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    while ((TWCR & (1 << TWINT)) == 0);
  ca:	ec eb       	ldi	r30, 0xBC	; 188
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	88 23       	and	r24, r24
  d2:	ec f7       	brge	.-6      	; 0xce <i2c_send_byte+0xe>
}
  d4:	08 95       	ret

000000d6 <i2c_send_packet>:

void i2c_send_packet(unsigned char value, unsigned char address)
{
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	c8 2f       	mov	r28, r24
  dc:	d6 2f       	mov	r29, r22
	i2c_start_condition();
  de:	0e 94 57 00 	call	0xae	; 0xae <i2c_start_condition>
	i2c_send_byte(address);
  e2:	8d 2f       	mov	r24, r29
  e4:	0e 94 60 00 	call	0xc0	; 0xc0 <i2c_send_byte>
	i2c_send_byte(value);
  e8:	8c 2f       	mov	r24, r28
  ea:	0e 94 60 00 	call	0xc0	; 0xc0 <i2c_send_byte>
    while ((TWCR & (1 << TWINT)) == 0);
}

void i2c_stop_condition(void)
{
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
  ee:	84 e9       	ldi	r24, 0x94	; 148
  f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
{
	i2c_start_condition();
	i2c_send_byte(address);
	i2c_send_byte(value);
	i2c_stop_condition();
}
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <putnibble>:
{
	char adr;

	adr = 0x40*row + col;
	adr |= 0x80;
	lcd1602_send_byte(adr, LCD_COMMAND);
  fa:	cf 93       	push	r28
  fc:	c8 2f       	mov	r28, r24
  fe:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 102:	84 60       	ori	r24, 0x04	; 4
 104:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 108:	6e e7       	ldi	r22, 0x7E	; 126
 10a:	0e 94 6b 00 	call	0xd6	; 0xd6 <i2c_send_packet>
 10e:	80 e1       	ldi	r24, 0x10	; 16
 110:	8a 95       	dec	r24
 112:	f1 f7       	brne	.-4      	; 0x110 <putnibble+0x16>
 114:	00 c0       	rjmp	.+0      	; 0x116 <putnibble+0x1c>
 116:	c2 95       	swap	r28
 118:	c0 7f       	andi	r28, 0xF0	; 240
 11a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 11e:	6e e7       	ldi	r22, 0x7E	; 126
 120:	8c 2b       	or	r24, r28
 122:	0e 94 6b 00 	call	0xd6	; 0xd6 <i2c_send_packet>
 126:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 12a:	8b 7f       	andi	r24, 0xFB	; 251
 12c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 130:	6e e7       	ldi	r22, 0x7E	; 126
 132:	0e 94 6b 00 	call	0xd6	; 0xd6 <i2c_send_packet>
 136:	80 e1       	ldi	r24, 0x10	; 16
 138:	8a 95       	dec	r24
 13a:	f1 f7       	brne	.-4      	; 0x138 <putnibble+0x3e>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <putnibble+0x44>
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <lcd1602_send_byte>:
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	c8 2f       	mov	r28, r24
 148:	d8 2f       	mov	r29, r24
 14a:	d2 95       	swap	r29
 14c:	df 70       	andi	r29, 0x0F	; 15
 14e:	61 11       	cpse	r22, r1
 150:	09 c0       	rjmp	.+18     	; 0x164 <lcd1602_send_byte+0x22>
 152:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 156:	8e 7f       	andi	r24, 0xFE	; 254
 158:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 15c:	6e e7       	ldi	r22, 0x7E	; 126
 15e:	0e 94 6b 00 	call	0xd6	; 0xd6 <i2c_send_packet>
 162:	08 c0       	rjmp	.+16     	; 0x174 <lcd1602_send_byte+0x32>
 164:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 168:	81 60       	ori	r24, 0x01	; 1
 16a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 16e:	6e e7       	ldi	r22, 0x7E	; 126
 170:	0e 94 6b 00 	call	0xd6	; 0xd6 <i2c_send_packet>
 174:	8d 2f       	mov	r24, r29
 176:	0e 94 7d 00 	call	0xfa	; 0xfa <putnibble>
 17a:	8c 2f       	mov	r24, r28
 17c:	0e 94 7d 00 	call	0xfa	; 0xfa <putnibble>
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	08 95       	ret

00000186 <lcd1602_send_char>:
 186:	cf 93       	push	r28
 188:	c8 2f       	mov	r28, r24
 18a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 18e:	81 60       	ori	r24, 0x01	; 1
 190:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 194:	6e e7       	ldi	r22, 0x7E	; 126
 196:	0e 94 6b 00 	call	0xd6	; 0xd6 <i2c_send_packet>
 19a:	8c 2f       	mov	r24, r28
 19c:	82 95       	swap	r24
 19e:	8f 70       	andi	r24, 0x0F	; 15
 1a0:	0e 94 7d 00 	call	0xfa	; 0xfa <putnibble>
 1a4:	8c 2f       	mov	r24, r28
 1a6:	0e 94 7d 00 	call	0xfa	; 0xfa <putnibble>
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <lcd1602_init>:
 1ae:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
 1b2:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c_init>
 1b6:	85 ea       	ldi	r24, 0xA5	; 165
 1b8:	9e e0       	ldi	r25, 0x0E	; 14
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <lcd1602_init+0xc>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <lcd1602_init+0x12>
 1c0:	00 00       	nop
 1c2:	83 e0       	ldi	r24, 0x03	; 3
 1c4:	0e 94 7d 00 	call	0xfa	; 0xfa <putnibble>
 1c8:	87 ee       	ldi	r24, 0xE7	; 231
 1ca:	93 e0       	ldi	r25, 0x03	; 3
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd1602_init+0x1e>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <lcd1602_init+0x24>
 1d2:	00 00       	nop
 1d4:	83 e0       	ldi	r24, 0x03	; 3
 1d6:	0e 94 7d 00 	call	0xfa	; 0xfa <putnibble>
 1da:	91 e2       	ldi	r25, 0x21	; 33
 1dc:	9a 95       	dec	r25
 1de:	f1 f7       	brne	.-4      	; 0x1dc <lcd1602_init+0x2e>
 1e0:	00 00       	nop
 1e2:	83 e0       	ldi	r24, 0x03	; 3
 1e4:	0e 94 7d 00 	call	0xfa	; 0xfa <putnibble>
 1e8:	89 ef       	ldi	r24, 0xF9	; 249
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <lcd1602_init+0x3e>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <lcd1602_init+0x44>
 1f2:	00 00       	nop
 1f4:	82 e0       	ldi	r24, 0x02	; 2
 1f6:	0e 94 7d 00 	call	0xfa	; 0xfa <putnibble>
 1fa:	89 ef       	ldi	r24, 0xF9	; 249
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <lcd1602_init+0x50>
 202:	00 c0       	rjmp	.+0      	; 0x204 <lcd1602_init+0x56>
 204:	00 00       	nop
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	88 e2       	ldi	r24, 0x28	; 40
 20a:	0e 94 a1 00 	call	0x142	; 0x142 <lcd1602_send_byte>
 20e:	89 ef       	ldi	r24, 0xF9	; 249
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <lcd1602_init+0x64>
 216:	00 c0       	rjmp	.+0      	; 0x218 <lcd1602_init+0x6a>
 218:	00 00       	nop
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	8c e0       	ldi	r24, 0x0C	; 12
 21e:	0e 94 a1 00 	call	0x142	; 0x142 <lcd1602_send_byte>
 222:	89 ef       	ldi	r24, 0xF9	; 249
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <lcd1602_init+0x78>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <lcd1602_init+0x7e>
 22c:	00 00       	nop
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	86 e0       	ldi	r24, 0x06	; 6
 232:	0e 94 a1 00 	call	0x142	; 0x142 <lcd1602_send_byte>
 236:	89 ef       	ldi	r24, 0xF9	; 249
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <lcd1602_init+0x8c>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <lcd1602_init+0x92>
 240:	00 00       	nop
 242:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 246:	88 60       	ori	r24, 0x08	; 8
 248:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 24c:	6e e7       	ldi	r22, 0x7E	; 126
 24e:	0e 94 6b 00 	call	0xd6	; 0xd6 <i2c_send_packet>
 252:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 256:	8d 7f       	andi	r24, 0xFD	; 253
 258:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 25c:	6e e7       	ldi	r22, 0x7E	; 126
 25e:	0e 94 6b 00 	call	0xd6	; 0xd6 <i2c_send_packet>
 262:	08 95       	ret

00000264 <lcd1602_send_string>:
}

void lcd1602_send_string(const char *str)
{
 264:	0f 93       	push	r16
 266:	1f 93       	push	r17
 268:	cf 93       	push	r28
 26a:	fc 01       	movw	r30, r24
	uint8_t i;

	for(i = 0; str[i] != '\0'; i++)
 26c:	80 81       	ld	r24, Z
 26e:	88 23       	and	r24, r24
 270:	59 f0       	breq	.+22     	; 0x288 <lcd1602_send_string+0x24>
 272:	8f 01       	movw	r16, r30
 274:	c0 e0       	ldi	r28, 0x00	; 0
		lcd1602_send_char(str[i]);
 276:	0e 94 c3 00 	call	0x186	; 0x186 <lcd1602_send_char>

void lcd1602_send_string(const char *str)
{
	uint8_t i;

	for(i = 0; str[i] != '\0'; i++)
 27a:	cf 5f       	subi	r28, 0xFF	; 255
 27c:	f8 01       	movw	r30, r16
 27e:	ec 0f       	add	r30, r28
 280:	f1 1d       	adc	r31, r1
 282:	80 81       	ld	r24, Z
 284:	81 11       	cpse	r24, r1
 286:	f7 cf       	rjmp	.-18     	; 0x276 <lcd1602_send_string+0x12>
		lcd1602_send_char(str[i]);
}
 288:	cf 91       	pop	r28
 28a:	1f 91       	pop	r17
 28c:	0f 91       	pop	r16
 28e:	08 95       	ret

00000290 <main>:
#define F_CPU 16000000UL
#include "lcd1602.h"

int main(void)
{
    lcd1602_init();
 290:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd1602_init>
	lcd1602_send_string("Merhaba Dunya");
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	91 e0       	ldi	r25, 0x01	; 1
 298:	0e 94 32 01 	call	0x264	; 0x264 <lcd1602_send_string>
 29c:	ff cf       	rjmp	.-2      	; 0x29c <main+0xc>

0000029e <_exit>:
 29e:	f8 94       	cli

000002a0 <__stop_program>:
 2a0:	ff cf       	rjmp	.-2      	; 0x2a0 <__stop_program>
