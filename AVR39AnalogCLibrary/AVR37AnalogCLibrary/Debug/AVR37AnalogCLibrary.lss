
AVR37AnalogCLibrary.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000817  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006dc  00000000  00000000  00000a4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ac  00000000  00000000  00001127  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  000014d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cc  00000000  00000000  00001590  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000159  00000000  00000000  0000195c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001ab5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__vector_23>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  78:	0c 94 7d 00 	jmp	0xfa	; 0xfa <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <ac_int>:
	return  ACSR & (1<<ACI);
}

void ac_int(int status, int mode)
{
	if (status == DISABLE)
  80:	00 97       	sbiw	r24, 0x00	; 0
  82:	21 f4       	brne	.+8      	; 0x8c <ac_int+0xc>
	{
		ACSR &= ~(1<<ACIE);
  84:	80 b7       	in	r24, 0x30	; 48
  86:	87 7f       	andi	r24, 0xF7	; 247
  88:	80 bf       	out	0x30, r24	; 48
  8a:	05 c0       	rjmp	.+10     	; 0x96 <ac_int+0x16>
	}
	else
	if (status == ENABLE)
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	19 f4       	brne	.+6      	; 0x96 <ac_int+0x16>
	{
		ACSR |= (1<<ACIE);
  90:	80 b7       	in	r24, 0x30	; 48
  92:	88 60       	ori	r24, 0x08	; 8
  94:	80 bf       	out	0x30, r24	; 48
	}
	switch (mode)
  96:	61 30       	cpi	r22, 0x01	; 1
  98:	71 05       	cpc	r23, r1
  9a:	49 f0       	breq	.+18     	; 0xae <ac_int+0x2e>
  9c:	62 30       	cpi	r22, 0x02	; 2
  9e:	71 05       	cpc	r23, r1
  a0:	69 f0       	breq	.+26     	; 0xbc <ac_int+0x3c>
  a2:	67 2b       	or	r22, r23
  a4:	71 f4       	brne	.+28     	; 0xc2 <ac_int+0x42>
	{
		case INT_TOGGLE:
		ACSR &=~ ( (1<<ACIS1) | (1<<ACIS0));
  a6:	80 b7       	in	r24, 0x30	; 48
  a8:	8c 7f       	andi	r24, 0xFC	; 252
  aa:	80 bf       	out	0x30, r24	; 48
		break;
  ac:	08 95       	ret
		case INT_FALLING:
		ACSR &=~ (1<<ACIS0);
  ae:	80 b7       	in	r24, 0x30	; 48
  b0:	8e 7f       	andi	r24, 0xFE	; 254
  b2:	80 bf       	out	0x30, r24	; 48
		ACSR |= (1<<ACIS1);
  b4:	80 b7       	in	r24, 0x30	; 48
  b6:	82 60       	ori	r24, 0x02	; 2
  b8:	80 bf       	out	0x30, r24	; 48
		break;
  ba:	08 95       	ret
		case INT_RISING:
		ACSR |= ( (1<<ACIS0) | (1<<ACIS1) );
  bc:	80 b7       	in	r24, 0x30	; 48
  be:	83 60       	ori	r24, 0x03	; 3
  c0:	80 bf       	out	0x30, r24	; 48
  c2:	08 95       	ret

000000c4 <main>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "AnalogComparator.h"
int main(void)
{
    ac_int(ENABLE, INT_TOGGLE);
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	70 e0       	ldi	r23, 0x00	; 0
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 40 00 	call	0x80	; 0x80 <ac_int>
	sei();
  d0:	78 94       	sei
	DDRC |= (1<<5);
  d2:	3d 9a       	sbi	0x07, 5	; 7
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <main+0x10>

000000d6 <__vector_23>:
    {
    }
}

ISR (ANALOG_COMP_vect)
{
  d6:	1f 92       	push	r1
  d8:	0f 92       	push	r0
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
	PORTC ^= (1<<PC5);
  e4:	98 b1       	in	r25, 0x08	; 8
  e6:	80 e2       	ldi	r24, 0x20	; 32
  e8:	89 27       	eor	r24, r25
  ea:	88 b9       	out	0x08, r24	; 8
  ec:	9f 91       	pop	r25
  ee:	8f 91       	pop	r24
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
