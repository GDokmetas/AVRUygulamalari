
AVR50TWIMaster.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000306  0000039a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000306  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800102  00800102  0000039c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a40  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000086d  00000000  00000000  00000ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000055c  00000000  00000000  00001729  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  00001c88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a6  00000000  00000000  00001d74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000273  00000000  00000000  0000221a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000248d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 85 00 	jmp	0x10a	; 0x10a <__ctors_end>
   4:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
   8:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
   c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  10:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  14:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  18:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  1c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  20:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  24:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  28:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  2c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  30:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  34:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  38:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  3c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  40:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  44:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  48:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  4c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  50:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  54:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  58:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  5c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  60:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__vector_24>
  64:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  68:	15 01       	movw	r2, r10
  6a:	67 01       	movw	r12, r14
  6c:	67 01       	movw	r12, r14
  6e:	67 01       	movw	r12, r14
  70:	67 01       	movw	r12, r14
  72:	67 01       	movw	r12, r14
  74:	67 01       	movw	r12, r14
  76:	67 01       	movw	r12, r14
  78:	15 01       	movw	r2, r10
  7a:	67 01       	movw	r12, r14
  7c:	67 01       	movw	r12, r14
  7e:	67 01       	movw	r12, r14
  80:	67 01       	movw	r12, r14
  82:	67 01       	movw	r12, r14
  84:	67 01       	movw	r12, r14
  86:	67 01       	movw	r12, r14
  88:	17 01       	movw	r2, r14
  8a:	67 01       	movw	r12, r14
  8c:	67 01       	movw	r12, r14
  8e:	67 01       	movw	r12, r14
  90:	67 01       	movw	r12, r14
  92:	67 01       	movw	r12, r14
  94:	67 01       	movw	r12, r14
  96:	67 01       	movw	r12, r14
  98:	67 01       	movw	r12, r14
  9a:	67 01       	movw	r12, r14
  9c:	67 01       	movw	r12, r14
  9e:	67 01       	movw	r12, r14
  a0:	67 01       	movw	r12, r14
  a2:	67 01       	movw	r12, r14
  a4:	67 01       	movw	r12, r14
  a6:	67 01       	movw	r12, r14
  a8:	17 01       	movw	r2, r14
  aa:	67 01       	movw	r12, r14
  ac:	67 01       	movw	r12, r14
  ae:	67 01       	movw	r12, r14
  b0:	67 01       	movw	r12, r14
  b2:	67 01       	movw	r12, r14
  b4:	67 01       	movw	r12, r14
  b6:	67 01       	movw	r12, r14
  b8:	67 01       	movw	r12, r14
  ba:	67 01       	movw	r12, r14
  bc:	67 01       	movw	r12, r14
  be:	67 01       	movw	r12, r14
  c0:	67 01       	movw	r12, r14
  c2:	67 01       	movw	r12, r14
  c4:	67 01       	movw	r12, r14
  c6:	67 01       	movw	r12, r14
  c8:	63 01       	movw	r12, r6
  ca:	67 01       	movw	r12, r14
  cc:	67 01       	movw	r12, r14
  ce:	67 01       	movw	r12, r14
  d0:	67 01       	movw	r12, r14
  d2:	67 01       	movw	r12, r14
  d4:	67 01       	movw	r12, r14
  d6:	67 01       	movw	r12, r14
  d8:	40 01       	movw	r8, r0
  da:	67 01       	movw	r12, r14
  dc:	67 01       	movw	r12, r14
  de:	67 01       	movw	r12, r14
  e0:	67 01       	movw	r12, r14
  e2:	67 01       	movw	r12, r14
  e4:	67 01       	movw	r12, r14
  e6:	67 01       	movw	r12, r14
  e8:	67 01       	movw	r12, r14
  ea:	67 01       	movw	r12, r14
  ec:	67 01       	movw	r12, r14
  ee:	67 01       	movw	r12, r14
  f0:	67 01       	movw	r12, r14
  f2:	67 01       	movw	r12, r14
  f4:	67 01       	movw	r12, r14
  f6:	67 01       	movw	r12, r14
  f8:	34 01       	movw	r6, r8
  fa:	67 01       	movw	r12, r14
  fc:	67 01       	movw	r12, r14
  fe:	67 01       	movw	r12, r14
 100:	67 01       	movw	r12, r14
 102:	67 01       	movw	r12, r14
 104:	67 01       	movw	r12, r14
 106:	67 01       	movw	r12, r14
 108:	52 01       	movw	r10, r4

0000010a <__ctors_end>:
 10a:	11 24       	eor	r1, r1
 10c:	1f be       	out	0x3f, r1	; 63
 10e:	cf ef       	ldi	r28, 0xFF	; 255
 110:	d8 e0       	ldi	r29, 0x08	; 8
 112:	de bf       	out	0x3e, r29	; 62
 114:	cd bf       	out	0x3d, r28	; 61

00000116 <__do_copy_data>:
 116:	11 e0       	ldi	r17, 0x01	; 1
 118:	a0 e0       	ldi	r26, 0x00	; 0
 11a:	b1 e0       	ldi	r27, 0x01	; 1
 11c:	e6 e0       	ldi	r30, 0x06	; 6
 11e:	f3 e0       	ldi	r31, 0x03	; 3
 120:	02 c0       	rjmp	.+4      	; 0x126 <__do_copy_data+0x10>
 122:	05 90       	lpm	r0, Z+
 124:	0d 92       	st	X+, r0
 126:	a2 30       	cpi	r26, 0x02	; 2
 128:	b1 07       	cpc	r27, r17
 12a:	d9 f7       	brne	.-10     	; 0x122 <__do_copy_data+0xc>

0000012c <__do_clear_bss>:
 12c:	21 e0       	ldi	r18, 0x01	; 1
 12e:	a2 e0       	ldi	r26, 0x02	; 2
 130:	b1 e0       	ldi	r27, 0x01	; 1
 132:	01 c0       	rjmp	.+2      	; 0x136 <.do_clear_bss_start>

00000134 <.do_clear_bss_loop>:
 134:	1d 92       	st	X+, r1

00000136 <.do_clear_bss_start>:
 136:	a9 30       	cpi	r26, 0x09	; 9
 138:	b2 07       	cpc	r27, r18
 13a:	e1 f7       	brne	.-8      	; 0x134 <.do_clear_bss_loop>
 13c:	0e 94 a4 00 	call	0x148	; 0x148 <main>
 140:	0c 94 81 01 	jmp	0x302	; 0x302 <_exit>

00000144 <__bad_interrupt>:
 144:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000148 <main>:
#include <avr/interrupt.h>
#include "TWI_Master.h"
#define F_CPU 16000000UL
#include <util/delay.h>
int main(void)
{
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	00 d0       	rcall	.+0      	; 0x14e <main+0x6>
 14e:	cd b7       	in	r28, 0x3d	; 61
 150:	de b7       	in	r29, 0x3e	; 62
    TWI_Master_Initialise();
 152:	0e 94 ce 00 	call	0x19c	; 0x19c <TWI_Master_Initialise>
	sei();
 156:	78 94       	sei
    while (1) 
    {
	unsigned char buf[2];
	buf[0] = 0x3F << 1;
 158:	0e e7       	ldi	r16, 0x7E	; 126
	buf[1] = 0xFF;
 15a:	1f ef       	ldi	r17, 0xFF	; 255
    TWI_Master_Initialise();
	sei();
    while (1) 
    {
	unsigned char buf[2];
	buf[0] = 0x3F << 1;
 15c:	09 83       	std	Y+1, r16	; 0x01
	buf[1] = 0xFF;
 15e:	1a 83       	std	Y+2, r17	; 0x02
	TWI_Start_Transceiver_With_Data(buf, 2);
 160:	62 e0       	ldi	r22, 0x02	; 2
 162:	ce 01       	movw	r24, r28
 164:	01 96       	adiw	r24, 0x01	; 1
 166:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <TWI_Start_Transceiver_With_Data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16a:	2f ef       	ldi	r18, 0xFF	; 255
 16c:	89 e6       	ldi	r24, 0x69	; 105
 16e:	98 e1       	ldi	r25, 0x18	; 24
 170:	21 50       	subi	r18, 0x01	; 1
 172:	80 40       	sbci	r24, 0x00	; 0
 174:	90 40       	sbci	r25, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <main+0x28>
 178:	00 c0       	rjmp	.+0      	; 0x17a <main+0x32>
 17a:	00 00       	nop
	_delay_ms(500);
	buf[1] = 0x00;
 17c:	1a 82       	std	Y+2, r1	; 0x02
	TWI_Start_Transceiver_With_Data(buf, 2);
 17e:	62 e0       	ldi	r22, 0x02	; 2
 180:	ce 01       	movw	r24, r28
 182:	01 96       	adiw	r24, 0x01	; 1
 184:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <TWI_Start_Transceiver_With_Data>
 188:	2f ef       	ldi	r18, 0xFF	; 255
 18a:	89 e6       	ldi	r24, 0x69	; 105
 18c:	98 e1       	ldi	r25, 0x18	; 24
 18e:	21 50       	subi	r18, 0x01	; 1
 190:	80 40       	sbci	r24, 0x00	; 0
 192:	90 40       	sbci	r25, 0x00	; 0
 194:	e1 f7       	brne	.-8      	; 0x18e <main+0x46>
 196:	00 c0       	rjmp	.+0      	; 0x198 <main+0x50>
 198:	00 00       	nop
 19a:	e0 cf       	rjmp	.-64     	; 0x15c <main+0x14>

0000019c <TWI_Master_Initialise>:
    {
      msg[ i ] = TWI_buf[ i ];
    }
  }
  return( TWI_statusReg.lastTransOK );                                   
}
 19c:	8c e0       	ldi	r24, 0x0C	; 12
 19e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 1a2:	8f ef       	ldi	r24, 0xFF	; 255
 1a4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 1a8:	84 e0       	ldi	r24, 0x04	; 4
 1aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 1ae:	08 95       	ret

000001b0 <TWI_Start_Transceiver_With_Data>:
 1b0:	dc 01       	movw	r26, r24
 1b2:	ec eb       	ldi	r30, 0xBC	; 188
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	90 81       	ld	r25, Z
 1b8:	90 fd       	sbrc	r25, 0
 1ba:	fd cf       	rjmp	.-6      	; 0x1b6 <TWI_Start_Transceiver_With_Data+0x6>
 1bc:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <TWI_msgSize>
 1c0:	8c 91       	ld	r24, X
 1c2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <TWI_buf>
 1c6:	80 fd       	sbrc	r24, 0
 1c8:	0c c0       	rjmp	.+24     	; 0x1e2 <TWI_Start_Transceiver_With_Data+0x32>
 1ca:	62 30       	cpi	r22, 0x02	; 2
 1cc:	50 f0       	brcs	.+20     	; 0x1e2 <TWI_Start_Transceiver_With_Data+0x32>
 1ce:	fd 01       	movw	r30, r26
 1d0:	31 96       	adiw	r30, 0x01	; 1
 1d2:	a6 e0       	ldi	r26, 0x06	; 6
 1d4:	b1 e0       	ldi	r27, 0x01	; 1
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	91 91       	ld	r25, Z+
 1da:	9d 93       	st	X+, r25
 1dc:	8f 5f       	subi	r24, 0xFF	; 255
 1de:	68 13       	cpse	r22, r24
 1e0:	fb cf       	rjmp	.-10     	; 0x1d8 <TWI_Start_Transceiver_With_Data+0x28>
 1e2:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <TWI_statusReg>
 1e6:	88 ef       	ldi	r24, 0xF8	; 248
 1e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 1ec:	85 ea       	ldi	r24, 0xA5	; 165
 1ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 1f2:	08 95       	ret

000001f4 <__vector_24>:
This function is the Interrupt Service Routine (ISR), and called when the TWI interrupt is triggered;
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/
ISR(TWI_vect)
{
 1f4:	1f 92       	push	r1
 1f6:	0f 92       	push	r0
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	0f 92       	push	r0
 1fc:	11 24       	eor	r1, r1
 1fe:	2f 93       	push	r18
 200:	3f 93       	push	r19
 202:	8f 93       	push	r24
 204:	9f 93       	push	r25
 206:	af 93       	push	r26
 208:	bf 93       	push	r27
 20a:	ef 93       	push	r30
 20c:	ff 93       	push	r31
  static unsigned char TWI_bufPtr;
  
  switch (TWSR)
 20e:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 212:	8e 2f       	mov	r24, r30
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	fc 01       	movw	r30, r24
 218:	38 97       	sbiw	r30, 0x08	; 8
 21a:	e1 35       	cpi	r30, 0x51	; 81
 21c:	f1 05       	cpc	r31, r1
 21e:	08 f0       	brcs	.+2      	; 0x222 <__vector_24+0x2e>
 220:	56 c0       	rjmp	.+172    	; 0x2ce <__vector_24+0xda>
 222:	ec 5c       	subi	r30, 0xCC	; 204
 224:	ff 4f       	sbci	r31, 0xFF	; 255
 226:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__tablejump2__>
  {
    case TWI_START:             // START has been transmitted  
    case TWI_REP_START:         // Repeated START has been transmitted
      TWI_bufPtr = 0;                                     // Set buffer pointer to the TWI Address location
 22a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
    case TWI_MTX_ADR_ACK:       // SLA+W has been transmitted and ACK received
    case TWI_MTX_DATA_ACK:      // Data byte has been transmitted and ACK received
      if (TWI_bufPtr < TWI_msgSize)
 22e:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
 232:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <TWI_msgSize>
 236:	e8 17       	cp	r30, r24
 238:	70 f4       	brcc	.+28     	; 0x256 <__vector_24+0x62>
      {
        TWDR = TWI_buf[TWI_bufPtr++];
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	8e 0f       	add	r24, r30
 23e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	eb 5f       	subi	r30, 0xFB	; 251
 246:	fe 4f       	sbci	r31, 0xFE	; 254
 248:	80 81       	ld	r24, Z
 24a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 24e:	85 e8       	ldi	r24, 0x85	; 133
 250:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 254:	43 c0       	rjmp	.+134    	; 0x2dc <__vector_24+0xe8>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to send byte
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
               (0<<TWWC);                                 //  
      }else                    // Send STOP after last byte
      {
        TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
 256:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <TWI_statusReg>
 25a:	81 60       	ori	r24, 0x01	; 1
 25c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <TWI_statusReg>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 260:	84 e9       	ldi	r24, 0x94	; 148
 262:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 266:	3a c0       	rjmp	.+116    	; 0x2dc <__vector_24+0xe8>
               (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
               (0<<TWWC);                                 //
      }
      break;
    case TWI_MRX_DATA_ACK:      // Data byte has been received and ACK transmitted
      TWI_buf[TWI_bufPtr++] = TWDR;
 268:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	8e 0f       	add	r24, r30
 270:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 274:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	eb 5f       	subi	r30, 0xFB	; 251
 27c:	fe 4f       	sbci	r31, 0xFE	; 254
 27e:	80 83       	st	Z, r24
    case TWI_MRX_ADR_ACK:       // SLA+R has been transmitted and ACK received
      if (TWI_bufPtr < (TWI_msgSize-1) )                  // Detect the last byte to NACK it.
 280:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <TWI_msgSize>
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	28 17       	cp	r18, r24
 290:	39 07       	cpc	r19, r25
 292:	24 f4       	brge	.+8      	; 0x29c <__vector_24+0xa8>
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 294:	85 ec       	ldi	r24, 0xC5	; 197
 296:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 29a:	20 c0       	rjmp	.+64     	; 0x2dc <__vector_24+0xe8>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to read next byte
               (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
               (0<<TWWC);                                 //  
      }else                    // Send NACK after next reception
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 29c:	85 e8       	ldi	r24, 0x85	; 133
 29e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 2a2:	1c c0       	rjmp	.+56     	; 0x2dc <__vector_24+0xe8>
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send NACK after reception
               (0<<TWWC);                                 // 
      }    
      break; 
    case TWI_MRX_DATA_NACK:     // Data byte has been received and NACK transmitted
      TWI_buf[TWI_bufPtr] = TWDR;
 2a4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 2a8:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	eb 5f       	subi	r30, 0xFB	; 251
 2b0:	fe 4f       	sbci	r31, 0xFE	; 254
 2b2:	80 83       	st	Z, r24
      TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
 2b4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <TWI_statusReg>
 2b8:	81 60       	ori	r24, 0x01	; 1
 2ba:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <TWI_statusReg>
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 2be:	84 e9       	ldi	r24, 0x94	; 148
 2c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
             (0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
             (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
             (0<<TWWC);                                 //
      break;      
 2c4:	0b c0       	rjmp	.+22     	; 0x2dc <__vector_24+0xe8>
    case TWI_ARB_LOST:          // Arbitration lost
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 2c6:	85 ea       	ldi	r24, 0xA5	; 165
 2c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
             (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag
             (0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|           // Initiate a (RE)START condition.
             (0<<TWWC);                                 //
      break;
 2cc:	07 c0       	rjmp	.+14     	; 0x2dc <__vector_24+0xe8>
    case TWI_MTX_ADR_NACK:      // SLA+W has been transmitted and NACK received
    case TWI_MRX_ADR_NACK:      // SLA+R has been transmitted and NACK received    
    case TWI_MTX_DATA_NACK:     // Data byte has been transmitted and NACK received
    case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
    default:     
      TWI_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
 2ce:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 2d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
                                                        // Reset TWI Interface
      TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
 2d6:	84 e0       	ldi	r24, 0x04	; 4
 2d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
             (0<<TWIE)|(0<<TWINT)|                      // Disable Interrupt
             (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // No Signal requests
             (0<<TWWC);                                 //
  }
}
 2dc:	ff 91       	pop	r31
 2de:	ef 91       	pop	r30
 2e0:	bf 91       	pop	r27
 2e2:	af 91       	pop	r26
 2e4:	9f 91       	pop	r25
 2e6:	8f 91       	pop	r24
 2e8:	3f 91       	pop	r19
 2ea:	2f 91       	pop	r18
 2ec:	0f 90       	pop	r0
 2ee:	0f be       	out	0x3f, r0	; 63
 2f0:	0f 90       	pop	r0
 2f2:	1f 90       	pop	r1
 2f4:	18 95       	reti

000002f6 <__tablejump2__>:
 2f6:	ee 0f       	add	r30, r30
 2f8:	ff 1f       	adc	r31, r31
 2fa:	05 90       	lpm	r0, Z+
 2fc:	f4 91       	lpm	r31, Z
 2fe:	e0 2d       	mov	r30, r0
 300:	09 94       	ijmp

00000302 <_exit>:
 302:	f8 94       	cli

00000304 <__stop_program>:
 304:	ff cf       	rjmp	.-2      	; 0x304 <__stop_program>
