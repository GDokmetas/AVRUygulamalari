
AVR47SPILibrary.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000011e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000011e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007e1  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d3  00000000  00000000  000009d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000316  00000000  00000000  000010a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  000013bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a0  00000000  00000000  00001444  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ff  00000000  00000000  000017e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000018e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include "spi.h"

int main(void)
{
    spi_init(MASTER); 
  80:	81 e0       	ldi	r24, 0x01	; 1
  82:	0e 94 47 00 	call	0x8e	; 0x8e <spi_init>
    while (1) 
    {
		spi_transceive(0x01);
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	0e 94 5d 00 	call	0xba	; 0xba <spi_transceive>
  8c:	fc cf       	rjmp	.-8      	; 0x86 <main+0x6>

0000008e <spi_init>:

void spi_init(uint8_t mode)
{
	if (SPI_DATA_ORDER == MSB_FIRST)
	{
		SPCR &= ~(1<<DORD);
  8e:	9c b5       	in	r25, 0x2c	; 44
  90:	9f 7d       	andi	r25, 0xDF	; 223
  92:	9c bd       	out	0x2c, r25	; 44
	}
	else
	{
		SPCR |= (1<<DORD);
	}
	if(mode == SLAVE)
  94:	81 11       	cpse	r24, r1
  96:	04 c0       	rjmp	.+8      	; 0xa0 <spi_init+0x12>
	{
			// MISO OUTPUT, OTHERS INPUT
			DDRB |= (1<<DDD4);
  98:	24 9a       	sbi	0x04, 4	; 4
			/* Enable SPI */
			SPCR = (1<<SPE);
  9a:	80 e4       	ldi	r24, 0x40	; 64
  9c:	8c bd       	out	0x2c, r24	; 44
  9e:	08 95       	ret
	}
	else
	{
			// MOSI , SCK OUTPUT
			DDRB |= (1<<DDB3)|(1<<DDB5);
  a0:	84 b1       	in	r24, 0x04	; 4
  a2:	88 62       	ori	r24, 0x28	; 40
  a4:	84 b9       	out	0x04, r24	; 4
			DDRB |= (1<<DDB2); //SS OUTPUT
  a6:	22 9a       	sbi	0x04, 2	; 4
			/*SPI Enable, Master Mod */
			SPCR |= ((1<<SPE)|(1<<MSTR));
  a8:	8c b5       	in	r24, 0x2c	; 44
  aa:	80 65       	ori	r24, 0x50	; 80
  ac:	8c bd       	out	0x2c, r24	; 44
			SPCR |= (SPI_CLOCK_RATE); 
  ae:	8c b5       	in	r24, 0x2c	; 44
  b0:	8c bd       	out	0x2c, r24	; 44
			SPSR |= (SPI_SPEED);
  b2:	8d b5       	in	r24, 0x2d	; 45
  b4:	81 60       	ori	r24, 0x01	; 1
  b6:	8d bd       	out	0x2d, r24	; 45
  b8:	08 95       	ret

000000ba <spi_transceive>:
}

uint8_t spi_transceive(uint8_t data)
{
	/* Send data */
	SPDR = data;
  ba:	8e bd       	out	0x2e, r24	; 46
	/* wait for end of transmission */
	while(!(SPSR & (1<<SPIF)))
  bc:	0d b4       	in	r0, 0x2d	; 45
  be:	07 fe       	sbrs	r0, 7
  c0:	fd cf       	rjmp	.-6      	; 0xbc <spi_transceive+0x2>
	;
	return SPDR;
  c2:	8e b5       	in	r24, 0x2e	; 46
}
  c4:	08 95       	ret

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>
