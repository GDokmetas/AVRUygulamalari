
AVR17UartTemel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000172  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000727  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000663  00000000  00000000  0000093b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000234  00000000  00000000  00000f9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000011d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038c  00000000  00000000  00001218  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000042  00000000  00000000  000015a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000015e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  78:	0c 94 8d 00 	jmp	0x11a	; 0x11a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <uart_basla>:
    }
}



void uart_basla(uint32_t baud){
  80:	9b 01       	movw	r18, r22
  82:	ac 01       	movw	r20, r24
	uint16_t baudRate=F_CPU/baud/16-1;
  84:	60 e4       	ldi	r22, 0x40	; 64
  86:	72 e4       	ldi	r23, 0x42	; 66
  88:	8f e0       	ldi	r24, 0x0F	; 15
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	0e 94 6b 00 	call	0xd6	; 0xd6 <__udivmodsi4>
  90:	21 50       	subi	r18, 0x01	; 1
  92:	31 09       	sbc	r19, r1
	UBRR0H=(baudRate>>8);
  94:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L=baudRate;
  98:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0B|=(1<<RXEN0)|(1<<TXEN0);
  9c:	e1 ec       	ldi	r30, 0xC1	; 193
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	88 61       	ori	r24, 0x18	; 24
  a4:	80 83       	st	Z, r24
	UCSR0C|=(1<<UCSZ01)|(1<<UCSZ00);
  a6:	e2 ec       	ldi	r30, 0xC2	; 194
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	86 60       	ori	r24, 0x06	; 6
  ae:	80 83       	st	Z, r24
  b0:	08 95       	ret

000000b2 <uart_gonder>:
}

void uart_gonder(uint8_t uData){
	while(!(UCSR0A & (1<<UDRE0)));
  b2:	e0 ec       	ldi	r30, 0xC0	; 192
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	90 81       	ld	r25, Z
  b8:	95 ff       	sbrs	r25, 5
  ba:	fd cf       	rjmp	.-6      	; 0xb6 <uart_gonder+0x4>
	UDR0=uData;
  bc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  c0:	08 95       	ret

000000c2 <main>:
#define BAUDRATE ((F_CPU)/(BAUD*16UL)-1)            // UBRR için baud verisini ayarlýyoruz
void uart_basla(uint32_t baud);
void uart_gonder(uint8_t data);
int main(void)
{
    uart_basla(9600);
  c2:	60 e8       	ldi	r22, 0x80	; 128
  c4:	75 e2       	ldi	r23, 0x25	; 37
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 40 00 	call	0x80	; 0x80 <uart_basla>
    while (1) 
    {
		uart_gonder('a');
  ce:	81 e6       	ldi	r24, 0x61	; 97
  d0:	0e 94 59 00 	call	0xb2	; 0xb2 <uart_gonder>
  d4:	fc cf       	rjmp	.-8      	; 0xce <main+0xc>

000000d6 <__udivmodsi4>:
  d6:	a1 e2       	ldi	r26, 0x21	; 33
  d8:	1a 2e       	mov	r1, r26
  da:	aa 1b       	sub	r26, r26
  dc:	bb 1b       	sub	r27, r27
  de:	fd 01       	movw	r30, r26
  e0:	0d c0       	rjmp	.+26     	; 0xfc <__udivmodsi4_ep>

000000e2 <__udivmodsi4_loop>:
  e2:	aa 1f       	adc	r26, r26
  e4:	bb 1f       	adc	r27, r27
  e6:	ee 1f       	adc	r30, r30
  e8:	ff 1f       	adc	r31, r31
  ea:	a2 17       	cp	r26, r18
  ec:	b3 07       	cpc	r27, r19
  ee:	e4 07       	cpc	r30, r20
  f0:	f5 07       	cpc	r31, r21
  f2:	20 f0       	brcs	.+8      	; 0xfc <__udivmodsi4_ep>
  f4:	a2 1b       	sub	r26, r18
  f6:	b3 0b       	sbc	r27, r19
  f8:	e4 0b       	sbc	r30, r20
  fa:	f5 0b       	sbc	r31, r21

000000fc <__udivmodsi4_ep>:
  fc:	66 1f       	adc	r22, r22
  fe:	77 1f       	adc	r23, r23
 100:	88 1f       	adc	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	1a 94       	dec	r1
 106:	69 f7       	brne	.-38     	; 0xe2 <__udivmodsi4_loop>
 108:	60 95       	com	r22
 10a:	70 95       	com	r23
 10c:	80 95       	com	r24
 10e:	90 95       	com	r25
 110:	9b 01       	movw	r18, r22
 112:	ac 01       	movw	r20, r24
 114:	bd 01       	movw	r22, r26
 116:	cf 01       	movw	r24, r30
 118:	08 95       	ret

0000011a <_exit>:
 11a:	f8 94       	cli

0000011c <__stop_program>:
 11c:	ff cf       	rjmp	.-2      	; 0x11c <__stop_program>
