
AVR40EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000258  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000002cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009d7  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e6  00000000  00000000  00000da3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000051e  00000000  00000000  00001589  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  00001aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c6  00000000  00000000  00001bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000297  00000000  00000000  0000208e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002325  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 c7 00 	call	0x18e	; 0x18e <main>
  88:	0c 94 2a 01 	jmp	0x254	; 0x254 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <adc_init>:
  90:	ea e7       	ldi	r30, 0x7A	; 122
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	87 60       	ori	r24, 0x07	; 7
  98:	80 83       	st	Z, r24
  9a:	ac e7       	ldi	r26, 0x7C	; 124
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	8c 91       	ld	r24, X
  a0:	80 64       	ori	r24, 0x40	; 64
  a2:	8c 93       	st	X, r24
  a4:	80 81       	ld	r24, Z
  a6:	80 68       	ori	r24, 0x80	; 128
  a8:	80 83       	st	Z, r24
  aa:	80 81       	ld	r24, Z
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 83       	st	Z, r24
  b0:	08 95       	ret

000000b2 <adc_read_map>:
  b2:	cf 92       	push	r12
  b4:	df 92       	push	r13
  b6:	ef 92       	push	r14
  b8:	ff 92       	push	r15
  ba:	0f 93       	push	r16
  bc:	1f 93       	push	r17
  be:	6a 01       	movw	r12, r20
  c0:	7b 01       	movw	r14, r22
  c2:	ec e7       	ldi	r30, 0x7C	; 124
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	90 81       	ld	r25, Z
  c8:	90 7f       	andi	r25, 0xF0	; 240
  ca:	90 83       	st	Z, r25
  cc:	90 81       	ld	r25, Z
  ce:	89 2b       	or	r24, r25
  d0:	80 83       	st	Z, r24
  d2:	ea e7       	ldi	r30, 0x7A	; 122
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	80 83       	st	Z, r24
  dc:	80 81       	ld	r24, Z
  de:	86 fd       	sbrc	r24, 6
  e0:	fd cf       	rjmp	.-6      	; 0xdc <adc_read_map+0x2a>
  e2:	a0 91 78 00 	lds	r26, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
  e6:	b0 91 79 00 	lds	r27, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
  ea:	a9 01       	movw	r20, r18
  ec:	98 01       	movw	r18, r16
  ee:	2c 19       	sub	r18, r12
  f0:	3d 09       	sbc	r19, r13
  f2:	4e 09       	sbc	r20, r14
  f4:	5f 09       	sbc	r21, r15
  f6:	0e 94 fd 00 	call	0x1fa	; 0x1fa <__muluhisi3>
  fa:	2f ef       	ldi	r18, 0xFF	; 255
  fc:	33 e0       	ldi	r19, 0x03	; 3
  fe:	40 e0       	ldi	r20, 0x00	; 0
 100:	50 e0       	ldi	r21, 0x00	; 0
 102:	0e 94 cf 00 	call	0x19e	; 0x19e <__divmodsi4>
 106:	c7 01       	movw	r24, r14
 108:	b6 01       	movw	r22, r12
 10a:	62 0f       	add	r22, r18
 10c:	73 1f       	adc	r23, r19
 10e:	84 1f       	adc	r24, r20
 110:	95 1f       	adc	r25, r21
 112:	1f 91       	pop	r17
 114:	0f 91       	pop	r16
 116:	ff 90       	pop	r15
 118:	ef 90       	pop	r14
 11a:	df 90       	pop	r13
 11c:	cf 90       	pop	r12
 11e:	08 95       	ret

00000120 <datalog>:
		datalog();
    }
}

void datalog()
{
 120:	0f 93       	push	r16
 122:	1f 93       	push	r17
	PORTC |= (1<<PC4);
 124:	44 9a       	sbi	0x08, 4	; 8
	while (PINC & (1<<PC3)); 
 126:	33 99       	sbic	0x06, 3	; 6
 128:	fe cf       	rjmp	.-4      	; 0x126 <datalog+0x6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	2f ef       	ldi	r18, 0xFF	; 255
 12c:	80 e7       	ldi	r24, 0x70	; 112
 12e:	92 e0       	ldi	r25, 0x02	; 2
 130:	21 50       	subi	r18, 0x01	; 1
 132:	80 40       	sbci	r24, 0x00	; 0
 134:	90 40       	sbci	r25, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <datalog+0x10>
 138:	00 c0       	rjmp	.+0      	; 0x13a <datalog+0x1a>
 13a:	00 00       	nop
    _delay_ms(50);
	uint8_t veri = adc_read_map(0, 0, 255);
 13c:	0f ef       	ldi	r16, 0xFF	; 255
 13e:	10 e0       	ldi	r17, 0x00	; 0
 140:	20 e0       	ldi	r18, 0x00	; 0
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	40 e0       	ldi	r20, 0x00	; 0
 146:	50 e0       	ldi	r21, 0x00	; 0
 148:	ba 01       	movw	r22, r20
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	0e 94 59 00 	call	0xb2	; 0xb2 <adc_read_map>
	while(EECR & (1<<EEPE))
 150:	f9 99       	sbic	0x1f, 1	; 31
 152:	fe cf       	rjmp	.-4      	; 0x150 <datalog+0x30>
	;
	/* Adres ve Veri yazmaçlarýný ayarla*/
	EEAR = address;
 154:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 158:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 15c:	92 bd       	out	0x22, r25	; 34
 15e:	81 bd       	out	0x21, r24	; 33
	EEDR = veri;
 160:	60 bd       	out	0x20, r22	; 32
	/*EEMPE bitini bir yap */
	EECR |= (1<<EEMPE);
 162:	fa 9a       	sbi	0x1f, 2	; 31
	/* EEPE bitini bir yaparak yazmaya baþlat.*/
	EECR |= (1<<EEPE);
 164:	f9 9a       	sbi	0x1f, 1	; 31
	address++;
 166:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 16a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 174:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	while(EECR & (1<<EEPE))
 178:	f9 99       	sbic	0x1f, 1	; 31
 17a:	fe cf       	rjmp	.-4      	; 0x178 <datalog+0x58>
	;
	/* Adres ve Veri yazmaçlarýný ayarla*/
	EEAR = address;
 17c:	92 bd       	out	0x22, r25	; 34
 17e:	81 bd       	out	0x21, r24	; 33
	EEDR = 0;
 180:	10 bc       	out	0x20, r1	; 32
	/*EEMPE bitini bir yap */
	EECR |= (1<<EEMPE);
 182:	fa 9a       	sbi	0x1f, 2	; 31
	/* EEPE bitini bir yaparak yazmaya baþlat.*/
	EECR |= (1<<EEPE);
 184:	f9 9a       	sbi	0x1f, 1	; 31
	PORTC &= ~(1<<PC4);
 186:	44 98       	cbi	0x08, 4	; 8
 188:	1f 91       	pop	r17
 18a:	0f 91       	pop	r16
 18c:	08 95       	ret

0000018e <main>:
#include <util/delay.h>
void datalog(void);
uint16_t address = 0;
int main(void)
{
    adc_init();
 18e:	0e 94 48 00 	call	0x90	; 0x90 <adc_init>
	DDRC |=(1<<PC4);
 192:	3c 9a       	sbi	0x07, 4	; 7
    while (1) 
    {
		if(!(PINC & (1<<PC3)))
 194:	33 99       	sbic	0x06, 3	; 6
 196:	fe cf       	rjmp	.-4      	; 0x194 <main+0x6>
		datalog();
 198:	0e 94 90 00 	call	0x120	; 0x120 <datalog>
 19c:	fb cf       	rjmp	.-10     	; 0x194 <main+0x6>

0000019e <__divmodsi4>:
 19e:	05 2e       	mov	r0, r21
 1a0:	97 fb       	bst	r25, 7
 1a2:	1e f4       	brtc	.+6      	; 0x1aa <__divmodsi4+0xc>
 1a4:	00 94       	com	r0
 1a6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__negsi2>
 1aa:	57 fd       	sbrc	r21, 7
 1ac:	07 d0       	rcall	.+14     	; 0x1bc <__divmodsi4_neg2>
 1ae:	0e 94 08 01 	call	0x210	; 0x210 <__udivmodsi4>
 1b2:	07 fc       	sbrc	r0, 7
 1b4:	03 d0       	rcall	.+6      	; 0x1bc <__divmodsi4_neg2>
 1b6:	4e f4       	brtc	.+18     	; 0x1ca <__divmodsi4_exit>
 1b8:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__negsi2>

000001bc <__divmodsi4_neg2>:
 1bc:	50 95       	com	r21
 1be:	40 95       	com	r20
 1c0:	30 95       	com	r19
 1c2:	21 95       	neg	r18
 1c4:	3f 4f       	sbci	r19, 0xFF	; 255
 1c6:	4f 4f       	sbci	r20, 0xFF	; 255
 1c8:	5f 4f       	sbci	r21, 0xFF	; 255

000001ca <__divmodsi4_exit>:
 1ca:	08 95       	ret

000001cc <__negsi2>:
 1cc:	90 95       	com	r25
 1ce:	80 95       	com	r24
 1d0:	70 95       	com	r23
 1d2:	61 95       	neg	r22
 1d4:	7f 4f       	sbci	r23, 0xFF	; 255
 1d6:	8f 4f       	sbci	r24, 0xFF	; 255
 1d8:	9f 4f       	sbci	r25, 0xFF	; 255
 1da:	08 95       	ret

000001dc <__umulhisi3>:
 1dc:	a2 9f       	mul	r26, r18
 1de:	b0 01       	movw	r22, r0
 1e0:	b3 9f       	mul	r27, r19
 1e2:	c0 01       	movw	r24, r0
 1e4:	a3 9f       	mul	r26, r19
 1e6:	70 0d       	add	r23, r0
 1e8:	81 1d       	adc	r24, r1
 1ea:	11 24       	eor	r1, r1
 1ec:	91 1d       	adc	r25, r1
 1ee:	b2 9f       	mul	r27, r18
 1f0:	70 0d       	add	r23, r0
 1f2:	81 1d       	adc	r24, r1
 1f4:	11 24       	eor	r1, r1
 1f6:	91 1d       	adc	r25, r1
 1f8:	08 95       	ret

000001fa <__muluhisi3>:
 1fa:	0e 94 ee 00 	call	0x1dc	; 0x1dc <__umulhisi3>
 1fe:	a5 9f       	mul	r26, r21
 200:	90 0d       	add	r25, r0
 202:	b4 9f       	mul	r27, r20
 204:	90 0d       	add	r25, r0
 206:	a4 9f       	mul	r26, r20
 208:	80 0d       	add	r24, r0
 20a:	91 1d       	adc	r25, r1
 20c:	11 24       	eor	r1, r1
 20e:	08 95       	ret

00000210 <__udivmodsi4>:
 210:	a1 e2       	ldi	r26, 0x21	; 33
 212:	1a 2e       	mov	r1, r26
 214:	aa 1b       	sub	r26, r26
 216:	bb 1b       	sub	r27, r27
 218:	fd 01       	movw	r30, r26
 21a:	0d c0       	rjmp	.+26     	; 0x236 <__udivmodsi4_ep>

0000021c <__udivmodsi4_loop>:
 21c:	aa 1f       	adc	r26, r26
 21e:	bb 1f       	adc	r27, r27
 220:	ee 1f       	adc	r30, r30
 222:	ff 1f       	adc	r31, r31
 224:	a2 17       	cp	r26, r18
 226:	b3 07       	cpc	r27, r19
 228:	e4 07       	cpc	r30, r20
 22a:	f5 07       	cpc	r31, r21
 22c:	20 f0       	brcs	.+8      	; 0x236 <__udivmodsi4_ep>
 22e:	a2 1b       	sub	r26, r18
 230:	b3 0b       	sbc	r27, r19
 232:	e4 0b       	sbc	r30, r20
 234:	f5 0b       	sbc	r31, r21

00000236 <__udivmodsi4_ep>:
 236:	66 1f       	adc	r22, r22
 238:	77 1f       	adc	r23, r23
 23a:	88 1f       	adc	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	1a 94       	dec	r1
 240:	69 f7       	brne	.-38     	; 0x21c <__udivmodsi4_loop>
 242:	60 95       	com	r22
 244:	70 95       	com	r23
 246:	80 95       	com	r24
 248:	90 95       	com	r25
 24a:	9b 01       	movw	r18, r22
 24c:	ac 01       	movw	r20, r24
 24e:	bd 01       	movw	r22, r26
 250:	cf 01       	movw	r24, r30
 252:	08 95       	ret

00000254 <_exit>:
 254:	f8 94       	cli

00000256 <__stop_program>:
 256:	ff cf       	rjmp	.-2      	; 0x256 <__stop_program>
