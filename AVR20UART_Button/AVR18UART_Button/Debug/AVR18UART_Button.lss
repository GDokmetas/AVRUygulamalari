
AVR18UART_Button.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  0000018c  00000200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000236  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000083e  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000730  00000000  00000000  00000b26  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000322  00000000  00000000  00001256  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00001578  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e7  00000000  00000000  000015e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a6  00000000  00000000  000019cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001a75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e8       	ldi	r30, 0x8C	; 140
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 33       	cpi	r26, 0x36	; 54
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 7b 00 	call	0xf6	; 0xf6 <main>
  8e:	0c 94 c4 00 	jmp	0x188	; 0x188 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <uart_basla>:
 }

 uint8_t uart_oku(){
 while(!(UCSR0A & (1<<RXC0)));
 return UDR0;
 }
  96:	9b 01       	movw	r18, r22
  98:	ac 01       	movw	r20, r24
  9a:	60 e4       	ldi	r22, 0x40	; 64
  9c:	72 e4       	ldi	r23, 0x42	; 66
  9e:	8f e0       	ldi	r24, 0x0F	; 15
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 a2 00 	call	0x144	; 0x144 <__udivmodsi4>
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	31 09       	sbc	r19, r1
  aa:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  ae:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  b2:	e1 ec       	ldi	r30, 0xC1	; 193
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	88 61       	ori	r24, 0x18	; 24
  ba:	80 83       	st	Z, r24
  bc:	e2 ec       	ldi	r30, 0xC2	; 194
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	86 60       	ori	r24, 0x06	; 6
  c4:	80 83       	st	Z, r24
  c6:	08 95       	ret

000000c8 <uart_gonder>:
  c8:	e0 ec       	ldi	r30, 0xC0	; 192
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	90 81       	ld	r25, Z
  ce:	95 ff       	sbrs	r25, 5
  d0:	fd cf       	rjmp	.-6      	; 0xcc <uart_gonder+0x4>
  d2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  d6:	08 95       	ret

000000d8 <uart_string>:

 void uart_string(const char *s )
 {
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	ec 01       	movw	r28, r24
 while (*s)
  de:	88 81       	ld	r24, Y
  e0:	88 23       	and	r24, r24
  e2:	31 f0       	breq	.+12     	; 0xf0 <uart_string+0x18>
  e4:	21 96       	adiw	r28, 0x01	; 1
 uart_gonder(*s++);
  e6:	0e 94 64 00 	call	0xc8	; 0xc8 <uart_gonder>
 return UDR0;
 }

 void uart_string(const char *s )
 {
 while (*s)
  ea:	89 91       	ld	r24, Y+
  ec:	81 11       	cpse	r24, r1
  ee:	fb cf       	rjmp	.-10     	; 0xe6 <uart_string+0xe>
 uart_gonder(*s++);

 }
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <main>:
 void uart_string(const char *s );
 uint8_t uart_oku();
 int main(void)
 {
 
 uart_basla(9600);
  f6:	60 e8       	ldi	r22, 0x80	; 128
  f8:	75 e2       	ldi	r23, 0x25	; 37
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 4b 00 	call	0x96	; 0x96 <uart_basla>
 DDRD &=~ ( (1<<PD2) | (1<<PD3) | (1<<PD4) );
 102:	8a b1       	in	r24, 0x0a	; 10
 104:	83 7e       	andi	r24, 0xE3	; 227
 106:	8a b9       	out	0x0a, r24	; 10
 //PORTD |= ((1<<PD2) | (1<<PD3) | (1<<PD4));
 PORTD = 0b11100;
 108:	8c e1       	ldi	r24, 0x1C	; 28
 10a:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	2f ef       	ldi	r18, 0xFF	; 255
 10e:	81 ee       	ldi	r24, 0xE1	; 225
 110:	94 e0       	ldi	r25, 0x04	; 4
 112:	21 50       	subi	r18, 0x01	; 1
 114:	80 40       	sbci	r24, 0x00	; 0
 116:	90 40       	sbci	r25, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <main+0x1c>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0x26>
 11c:	00 00       	nop
 _delay_ms(100);
 while (1)
 {
 if (!(PIND & (1<<PD2)))
 11e:	4a 99       	sbic	0x09, 2	; 9
 120:	04 c0       	rjmp	.+8      	; 0x12a <main+0x34>
 uart_string("1. Dugme Basili \n");
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	0e 94 6c 00 	call	0xd8	; 0xd8 <uart_string>
 if (!(PIND & (1<<PD3)))
 12a:	4b 99       	sbic	0x09, 3	; 9
 12c:	04 c0       	rjmp	.+8      	; 0x136 <main+0x40>
 uart_string("2. Dugme Basili \n");
 12e:	82 e1       	ldi	r24, 0x12	; 18
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	0e 94 6c 00 	call	0xd8	; 0xd8 <uart_string>
 if (!(PIND & (1<<PD4)))
 136:	4c 99       	sbic	0x09, 4	; 9
 138:	f2 cf       	rjmp	.-28     	; 0x11e <main+0x28>
 uart_string("3. Dugme Basili \n");
 13a:	84 e2       	ldi	r24, 0x24	; 36
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	0e 94 6c 00 	call	0xd8	; 0xd8 <uart_string>
 142:	ed cf       	rjmp	.-38     	; 0x11e <main+0x28>

00000144 <__udivmodsi4>:
 144:	a1 e2       	ldi	r26, 0x21	; 33
 146:	1a 2e       	mov	r1, r26
 148:	aa 1b       	sub	r26, r26
 14a:	bb 1b       	sub	r27, r27
 14c:	fd 01       	movw	r30, r26
 14e:	0d c0       	rjmp	.+26     	; 0x16a <__udivmodsi4_ep>

00000150 <__udivmodsi4_loop>:
 150:	aa 1f       	adc	r26, r26
 152:	bb 1f       	adc	r27, r27
 154:	ee 1f       	adc	r30, r30
 156:	ff 1f       	adc	r31, r31
 158:	a2 17       	cp	r26, r18
 15a:	b3 07       	cpc	r27, r19
 15c:	e4 07       	cpc	r30, r20
 15e:	f5 07       	cpc	r31, r21
 160:	20 f0       	brcs	.+8      	; 0x16a <__udivmodsi4_ep>
 162:	a2 1b       	sub	r26, r18
 164:	b3 0b       	sbc	r27, r19
 166:	e4 0b       	sbc	r30, r20
 168:	f5 0b       	sbc	r31, r21

0000016a <__udivmodsi4_ep>:
 16a:	66 1f       	adc	r22, r22
 16c:	77 1f       	adc	r23, r23
 16e:	88 1f       	adc	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	1a 94       	dec	r1
 174:	69 f7       	brne	.-38     	; 0x150 <__udivmodsi4_loop>
 176:	60 95       	com	r22
 178:	70 95       	com	r23
 17a:	80 95       	com	r24
 17c:	90 95       	com	r25
 17e:	9b 01       	movw	r18, r22
 180:	ac 01       	movw	r20, r24
 182:	bd 01       	movw	r22, r26
 184:	cf 01       	movw	r24, r30
 186:	08 95       	ret

00000188 <_exit>:
 188:	f8 94       	cli

0000018a <__stop_program>:
 18a:	ff cf       	rjmp	.-2      	; 0x18a <__stop_program>
