
AVR20PythonSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000020e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000020e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000020e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000795  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ea  00000000  00000000  00000a45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f6  00000000  00000000  0000112f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  00001428  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ce  00000000  00000000  00001488  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000098  00000000  00000000  00001856  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000018ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 90 00 	jmp	0x120	; 0x120 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  88:	0c 94 cb 00 	jmp	0x196	; 0x196 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <uart_basla>:
	}
}



void uart_basla(uint32_t baud){
  90:	9b 01       	movw	r18, r22
  92:	ac 01       	movw	r20, r24
	uint16_t baudRate=F_CPU/baud/16-1;
  94:	60 e4       	ldi	r22, 0x40	; 64
  96:	72 e4       	ldi	r23, 0x42	; 66
  98:	8f e0       	ldi	r24, 0x0F	; 15
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	0e 94 a9 00 	call	0x152	; 0x152 <__udivmodsi4>
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	31 09       	sbc	r19, r1
	UBRR0H=(baudRate>>8);
  a4:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L=baudRate;
  a8:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0B|=(1<<RXEN0)|(1<<TXEN0);
  ac:	e1 ec       	ldi	r30, 0xC1	; 193
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	88 61       	ori	r24, 0x18	; 24
  b4:	80 83       	st	Z, r24
	UCSR0C|=(1<<UCSZ01)|(1<<UCSZ00);
  b6:	a2 ec       	ldi	r26, 0xC2	; 194
  b8:	b0 e0       	ldi	r27, 0x00	; 0
  ba:	8c 91       	ld	r24, X
  bc:	86 60       	ori	r24, 0x06	; 6
  be:	8c 93       	st	X, r24
	UCSR0B |= (1<<RXCIE0);
  c0:	80 81       	ld	r24, Z
  c2:	80 68       	ori	r24, 0x80	; 128
  c4:	80 83       	st	Z, r24
  c6:	08 95       	ret

000000c8 <main>:
void uart_string(const char *s );
volatile uint8_t a;
int main(void)
{
	
	uart_basla(9600);
  c8:	60 e8       	ldi	r22, 0x80	; 128
  ca:	75 e2       	ldi	r23, 0x25	; 37
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 48 00 	call	0x90	; 0x90 <uart_basla>

	sei();
  d4:	78 94       	sei
	DDRD &=~ ( (1<<PD2) | (1<<PD3) | (1<<PD4) );
  d6:	8a b1       	in	r24, 0x0a	; 10
  d8:	83 7e       	andi	r24, 0xE3	; 227
  da:	8a b9       	out	0x0a, r24	; 10
	// PORTD |= ((1<<PD2) | (1<<PD3) | (1<<PD4));
	PORTD = 0b11100;
  dc:	8c e1       	ldi	r24, 0x1C	; 28
  de:	8b b9       	out	0x0b, r24	; 11
	DDRD |= (1<<PD5);
  e0:	55 9a       	sbi	0x0a, 5	; 10
	DDRD |= (1<<PD6);
  e2:	56 9a       	sbi	0x0a, 6	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	2f ef       	ldi	r18, 0xFF	; 255
  e6:	81 ee       	ldi	r24, 0xE1	; 225
  e8:	94 e0       	ldi	r25, 0x04	; 4
  ea:	21 50       	subi	r18, 0x01	; 1
  ec:	80 40       	sbci	r24, 0x00	; 0
  ee:	90 40       	sbci	r25, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x22>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x2c>
  f4:	00 00       	nop
	_delay_ms(100); // MCU Kendine Gelsin
	while (1)
	{
	if (a=='1')
  f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  fa:	81 33       	cpi	r24, 0x31	; 49
  fc:	09 f4       	brne	.+2      	; 0x100 <main+0x38>
	PORTD |= (1<<5);
  fe:	5d 9a       	sbi	0x0b, 5	; 11
	if (a=='2')
 100:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 104:	82 33       	cpi	r24, 0x32	; 50
 106:	09 f4       	brne	.+2      	; 0x10a <main+0x42>
	PORTD &= ~(1<<5);
 108:	5d 98       	cbi	0x0b, 5	; 11
	if (a=='3')
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 10e:	83 33       	cpi	r24, 0x33	; 51
 110:	09 f4       	brne	.+2      	; 0x114 <main+0x4c>
	PORTD |= (1<<6);
 112:	5e 9a       	sbi	0x0b, 6	; 11
	if (a=='4')
 114:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 118:	84 33       	cpi	r24, 0x34	; 52
 11a:	69 f7       	brne	.-38     	; 0xf6 <main+0x2e>
	PORTD &= ~(1<<6);
 11c:	5e 98       	cbi	0x0b, 6	; 11
 11e:	eb cf       	rjmp	.-42     	; 0xf6 <main+0x2e>

00000120 <__vector_18>:
	UCSR0B |= (1<<RXCIE0);
}


ISR (USART_RX_vect)
{
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	8f 93       	push	r24
 12c:	ef 93       	push	r30
 12e:	ff 93       	push	r31
	while(!(UCSR0A & (1<<RXC0)));
 130:	e0 ec       	ldi	r30, 0xC0	; 192
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	88 23       	and	r24, r24
 138:	ec f7       	brge	.-6      	; 0x134 <__vector_18+0x14>
	a = UDR0;
 13a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 13e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 142:	ff 91       	pop	r31
 144:	ef 91       	pop	r30
 146:	8f 91       	pop	r24
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <__udivmodsi4>:
 152:	a1 e2       	ldi	r26, 0x21	; 33
 154:	1a 2e       	mov	r1, r26
 156:	aa 1b       	sub	r26, r26
 158:	bb 1b       	sub	r27, r27
 15a:	fd 01       	movw	r30, r26
 15c:	0d c0       	rjmp	.+26     	; 0x178 <__udivmodsi4_ep>

0000015e <__udivmodsi4_loop>:
 15e:	aa 1f       	adc	r26, r26
 160:	bb 1f       	adc	r27, r27
 162:	ee 1f       	adc	r30, r30
 164:	ff 1f       	adc	r31, r31
 166:	a2 17       	cp	r26, r18
 168:	b3 07       	cpc	r27, r19
 16a:	e4 07       	cpc	r30, r20
 16c:	f5 07       	cpc	r31, r21
 16e:	20 f0       	brcs	.+8      	; 0x178 <__udivmodsi4_ep>
 170:	a2 1b       	sub	r26, r18
 172:	b3 0b       	sbc	r27, r19
 174:	e4 0b       	sbc	r30, r20
 176:	f5 0b       	sbc	r31, r21

00000178 <__udivmodsi4_ep>:
 178:	66 1f       	adc	r22, r22
 17a:	77 1f       	adc	r23, r23
 17c:	88 1f       	adc	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	1a 94       	dec	r1
 182:	69 f7       	brne	.-38     	; 0x15e <__udivmodsi4_loop>
 184:	60 95       	com	r22
 186:	70 95       	com	r23
 188:	80 95       	com	r24
 18a:	90 95       	com	r25
 18c:	9b 01       	movw	r18, r22
 18e:	ac 01       	movw	r20, r24
 190:	bd 01       	movw	r22, r26
 192:	cf 01       	movw	r24, r30
 194:	08 95       	ret

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
