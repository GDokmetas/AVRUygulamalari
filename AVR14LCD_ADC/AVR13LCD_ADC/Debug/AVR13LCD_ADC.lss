
AVR13LCD_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000009ce  00000a42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000a56  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000c0  00000000  00000000  00000ab2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000ae4  00000000  00000000  00000b72  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000470  00000000  00000000  00001656  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000048a  00000000  00000000  00001ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001e4  00000000  00000000  00001f50  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002ca  00000000  00000000  00002134  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000068a  00000000  00000000  000023fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000d0  00000000  00000000  00002a88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ec       	ldi	r30, 0xCE	; 206
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  8e:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <adc_init>:
    }
}

void adc_init(void)
{
	ADCSRA |= ((1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0));
  96:	ea e7       	ldi	r30, 0x7A	; 122
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	87 60       	ori	r24, 0x07	; 7
  9e:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);
  a0:	ac e7       	ldi	r26, 0x7C	; 124
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	8c 91       	ld	r24, X
  a6:	80 64       	ori	r24, 0x40	; 64
  a8:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADEN);
  aa:	80 81       	ld	r24, Z
  ac:	80 68       	ori	r24, 0x80	; 128
  ae:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
  b0:	80 81       	ld	r24, Z
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	80 83       	st	Z, r24
  b6:	08 95       	ret

000000b8 <read_adc>:
}

unsigned int read_adc(unsigned char channel)
{
	ADMUX &= 0xF0;
  b8:	ec e7       	ldi	r30, 0x7C	; 124
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	90 81       	ld	r25, Z
  be:	90 7f       	andi	r25, 0xF0	; 240
  c0:	90 83       	st	Z, r25
	ADMUX |= channel;
  c2:	90 81       	ld	r25, Z
  c4:	89 2b       	or	r24, r25
  c6:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
  c8:	ea e7       	ldi	r30, 0x7A	; 122
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	80 64       	ori	r24, 0x40	; 64
  d0:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC));
  d2:	80 81       	ld	r24, Z
  d4:	86 fd       	sbrc	r24, 6
  d6:	fd cf       	rjmp	.-6      	; 0xd2 <read_adc+0x1a>
	return ADCW;
  d8:	80 91 78 00 	lds	r24, 0x0078
  dc:	90 91 79 00 	lds	r25, 0x0079
}
  e0:	08 95       	ret

000000e2 <main>:
// Fonksiyon Prototipleri
void adc_init(void);
unsigned int read_adc(unsigned char channel);
long map(long x, long in_min, long in_max, long out_min, long out_max);
int main(void)
{
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	cd b7       	in	r28, 0x3d	; 61
  e8:	de b7       	in	r29, 0x3e	; 62
  ea:	2a 97       	sbiw	r28, 0x0a	; 10
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	f8 94       	cli
  f0:	de bf       	out	0x3e, r29	; 62
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	cd bf       	out	0x3d, r28	; 61
	lcd_init(LCD_DISP_ON);
  f6:	8c e0       	ldi	r24, 0x0C	; 12
  f8:	0e 94 88 01 	call	0x310	; 0x310 <lcd_init>
	adc_init();
  fc:	0e 94 4b 00 	call	0x96	; 0x96 <adc_init>
    while(1)
    {
    lcd_home();
	lcd_puts("HAM:");
	unsigned int adc_deger = read_adc(0);
	char lcd_ch[10]="";
 100:	0f 2e       	mov	r0, r31
 102:	f6 e0       	ldi	r31, 0x06	; 6
 104:	6f 2e       	mov	r6, r31
 106:	f0 2d       	mov	r31, r0
 108:	6e 01       	movw	r12, r28
 10a:	85 e0       	ldi	r24, 0x05	; 5
 10c:	c8 0e       	add	r12, r24
 10e:	d1 1c       	adc	r13, r1
	sprintf(lcd_ch, "%u", adc_deger);
 110:	0f 2e       	mov	r0, r31
 112:	f5 e0       	ldi	r31, 0x05	; 5
 114:	ef 2e       	mov	r14, r31
 116:	f1 e0       	ldi	r31, 0x01	; 1
 118:	ff 2e       	mov	r15, r31
 11a:	f0 2d       	mov	r31, r0
 11c:	8e 01       	movw	r16, r28
 11e:	0f 5f       	subi	r16, 0xFF	; 255
 120:	1f 4f       	sbci	r17, 0xFF	; 255
	return ADCW;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 122:	0f 2e       	mov	r0, r31
 124:	88 24       	eor	r8, r8
 126:	8a 94       	dec	r8
 128:	f3 e0       	ldi	r31, 0x03	; 3
 12a:	9f 2e       	mov	r9, r31
 12c:	a1 2c       	mov	r10, r1
 12e:	b1 2c       	mov	r11, r1
 130:	f0 2d       	mov	r31, r0
{
	lcd_init(LCD_DISP_ON);
	adc_init();
    while(1)
    {
    lcd_home();
 132:	0e 94 5f 01 	call	0x2be	; 0x2be <lcd_home>
	lcd_puts("HAM:");
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <lcd_puts>
	unsigned int adc_deger = read_adc(0);
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	0e 94 5c 00 	call	0xb8	; 0xb8 <read_adc>
 144:	58 2e       	mov	r5, r24
 146:	79 2e       	mov	r7, r25
	char lcd_ch[10]="";
 148:	19 82       	std	Y+1, r1	; 0x01
 14a:	1a 82       	std	Y+2, r1	; 0x02
 14c:	1b 82       	std	Y+3, r1	; 0x03
 14e:	1c 82       	std	Y+4, r1	; 0x04
 150:	f6 01       	movw	r30, r12
 152:	86 2d       	mov	r24, r6
 154:	11 92       	st	Z+, r1
 156:	8a 95       	dec	r24
 158:	e9 f7       	brne	.-6      	; 0x154 <main+0x72>
	sprintf(lcd_ch, "%u", adc_deger);
 15a:	9f 93       	push	r25
 15c:	5f 92       	push	r5
 15e:	ff 92       	push	r15
 160:	ef 92       	push	r14
 162:	1f 93       	push	r17
 164:	0f 93       	push	r16
 166:	0e 94 14 02 	call	0x428	; 0x428 <sprintf>
	lcd_puts(lcd_ch);
 16a:	c8 01       	movw	r24, r16
 16c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <lcd_puts>
	lcd_puts("   ");
 170:	80 e1       	ldi	r24, 0x10	; 16
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	0e 94 78 01 	call	0x2f0	; 0x2f0 <lcd_puts>
	
	// ALT SATIR 
	lcd_gotoxy(0,1);
 178:	61 e0       	ldi	r22, 0x01	; 1
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	0e 94 51 01 	call	0x2a2	; 0x2a2 <lcd_gotoxy>
	lcd_puts("YUZDE:");
 180:	88 e0       	ldi	r24, 0x08	; 8
 182:	91 e0       	ldi	r25, 0x01	; 1
 184:	0e 94 78 01 	call	0x2f0	; 0x2f0 <lcd_puts>
	lcd_ch[0] = '\0'; // String sıfırlandı
 188:	19 82       	std	Y+1, r1	; 0x01
	return ADCW;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 18a:	25 2d       	mov	r18, r5
 18c:	37 2d       	mov	r19, r7
 18e:	a4 e6       	ldi	r26, 0x64	; 100
 190:	b0 e0       	ldi	r27, 0x00	; 0
 192:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__umulhisi3>
 196:	a5 01       	movw	r20, r10
 198:	94 01       	movw	r18, r8
 19a:	0e 94 c4 01 	call	0x388	; 0x388 <__divmodsi4>
	// ALT SATIR 
	lcd_gotoxy(0,1);
	lcd_puts("YUZDE:");
	lcd_ch[0] = '\0'; // String sıfırlandı
    long deger = map(adc_deger, 0, 1023, 0, 100);
	sprintf(lcd_ch, "%u", (int)deger);
 19e:	3f 93       	push	r19
 1a0:	2f 93       	push	r18
 1a2:	ff 92       	push	r15
 1a4:	ef 92       	push	r14
 1a6:	1f 93       	push	r17
 1a8:	0f 93       	push	r16
 1aa:	0e 94 14 02 	call	0x428	; 0x428 <sprintf>
	lcd_puts(lcd_ch);
 1ae:	c8 01       	movw	r24, r16
 1b0:	0e 94 78 01 	call	0x2f0	; 0x2f0 <lcd_puts>
	lcd_puts("%   ");
 1b4:	8f e0       	ldi	r24, 0x0F	; 15
 1b6:	91 e0       	ldi	r25, 0x01	; 1
 1b8:	0e 94 78 01 	call	0x2f0	; 0x2f0 <lcd_puts>
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	f8 94       	cli
 1c0:	de bf       	out	0x3e, r29	; 62
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	cd bf       	out	0x3d, r28	; 61
 1c6:	b5 cf       	rjmp	.-150    	; 0x132 <main+0x50>

000001c8 <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 1c8:	5c 9a       	sbi	0x0b, 4	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ca:	00 00       	nop
    lcd_e_delay();
    lcd_e_low();
 1cc:	5c 98       	cbi	0x0b, 4	; 11
 1ce:	08 95       	ret

000001d0 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
 1d0:	cf 93       	push	r28
 1d2:	c8 2f       	mov	r28, r24
    unsigned char dataBits ;


    if (rs) {        /* write data        (RS=1, RW=0) */
 1d4:	66 23       	and	r22, r22
 1d6:	11 f0       	breq	.+4      	; 0x1dc <lcd_write+0xc>
       lcd_rs_high();
 1d8:	5a 9a       	sbi	0x0b, 2	; 11
 1da:	01 c0       	rjmp	.+2      	; 0x1de <lcd_write+0xe>
    } else {         /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 1dc:	5a 98       	cbi	0x0b, 2	; 11
    }
    lcd_rw_low();    /* RW=0  write mode      */
 1de:	5b 98       	cbi	0x0b, 3	; 11
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 1e0:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 1e2:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 1e4:	57 9a       	sbi	0x0a, 7	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 1e6:	20 9a       	sbi	0x04, 0	; 4
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 1e8:	28 98       	cbi	0x05, 0	; 5
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 1ea:	5f 98       	cbi	0x0b, 7	; 11
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 1ec:	5e 98       	cbi	0x0b, 6	; 11
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 1ee:	5d 98       	cbi	0x0b, 5	; 11
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 1f0:	cc 23       	and	r28, r28
 1f2:	0c f4       	brge	.+2      	; 0x1f6 <lcd_write+0x26>
 1f4:	28 9a       	sbi	0x05, 0	; 5
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 1f6:	c6 fd       	sbrc	r28, 6
 1f8:	5f 9a       	sbi	0x0b, 7	; 11
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 1fa:	c5 fd       	sbrc	r28, 5
 1fc:	5e 9a       	sbi	0x0b, 6	; 11
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
 1fe:	c4 fd       	sbrc	r28, 4
 200:	5d 9a       	sbi	0x0b, 5	; 11
        lcd_e_toggle();
 202:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <toggle_e>
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 206:	28 98       	cbi	0x05, 0	; 5
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 208:	5f 98       	cbi	0x0b, 7	; 11
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 20a:	5e 98       	cbi	0x0b, 6	; 11
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 20c:	5d 98       	cbi	0x0b, 5	; 11
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 20e:	c3 fd       	sbrc	r28, 3
 210:	28 9a       	sbi	0x05, 0	; 5
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 212:	c2 fd       	sbrc	r28, 2
 214:	5f 9a       	sbi	0x0b, 7	; 11
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 216:	c1 fd       	sbrc	r28, 1
 218:	5e 9a       	sbi	0x0b, 6	; 11
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 21a:	c0 fd       	sbrc	r28, 0
 21c:	5d 9a       	sbi	0x0b, 5	; 11
        lcd_e_toggle();        
 21e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <toggle_e>
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 222:	5d 9a       	sbi	0x0b, 5	; 11
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 224:	5e 9a       	sbi	0x0b, 6	; 11
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 226:	5f 9a       	sbi	0x0b, 7	; 11
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 228:	28 9a       	sbi	0x05, 0	; 5
    }
}
 22a:	cf 91       	pop	r28
 22c:	08 95       	ret

0000022e <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
 22e:	88 23       	and	r24, r24
 230:	11 f0       	breq	.+4      	; 0x236 <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
 232:	5a 9a       	sbi	0x0b, 2	; 11
 234:	01 c0       	rjmp	.+2      	; 0x238 <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 236:	5a 98       	cbi	0x0b, 2	; 11
    lcd_rw_high();                           /* RW=1  read mode      */
 238:	5b 9a       	sbi	0x0b, 3	; 11
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
 23a:	55 98       	cbi	0x0a, 5	; 10
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
 23c:	56 98       	cbi	0x0a, 6	; 10
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
 23e:	57 98       	cbi	0x0a, 7	; 10
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
 240:	20 98       	cbi	0x04, 0	; 4
                
        /* read high nibble first */
        lcd_e_high();
 242:	5c 9a       	sbi	0x0b, 4	; 11
 244:	00 00       	nop
        lcd_e_delay();        
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 246:	4d 99       	sbic	0x09, 5	; 9
 248:	02 c0       	rjmp	.+4      	; 0x24e <lcd_read+0x20>
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
                
        /* read high nibble first */
        lcd_e_high();
        lcd_e_delay();        
        data = 0;
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	01 c0       	rjmp	.+2      	; 0x250 <lcd_read+0x22>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 24e:	80 e1       	ldi	r24, 0x10	; 16
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
 250:	4e 99       	sbic	0x09, 6	; 9
 252:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 254:	4f 99       	sbic	0x09, 7	; 9
 256:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 258:	18 99       	sbic	0x03, 0	; 3
 25a:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
 25c:	5c 98       	cbi	0x0b, 4	; 11
 25e:	00 00       	nop

        lcd_e_delay();                       /* Enable 500ns low       */
    
        /* read low nibble */    
        lcd_e_high();
 260:	5c 9a       	sbi	0x0b, 4	; 11
 262:	00 00       	nop
        lcd_e_delay();
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 264:	4d 99       	sbic	0x09, 5	; 9
 266:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 268:	4e 99       	sbic	0x09, 6	; 9
 26a:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 26c:	4f 99       	sbic	0x09, 7	; 9
 26e:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 270:	18 99       	sbic	0x03, 0	; 3
 272:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
 274:	5c 98       	cbi	0x0b, 4	; 11
    }
    return data;
}
 276:	08 95       	ret

00000278 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_read>
 27e:	88 23       	and	r24, r24
 280:	dc f3       	brlt	.-10     	; 0x278 <lcd_waitbusy>
 282:	00 c0       	rjmp	.+0      	; 0x284 <lcd_waitbusy+0xc>
 284:	00 c0       	rjmp	.+0      	; 0x286 <lcd_waitbusy+0xe>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(LCD_DELAY_BUSY_FLAG);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_read>
    
}/* lcd_waitbusy */
 28c:	08 95       	ret

0000028e <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 28e:	cf 93       	push	r28
 290:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 292:	0e 94 3c 01 	call	0x278	; 0x278 <lcd_waitbusy>
    lcd_write(cmd,0);
 296:	60 e0       	ldi	r22, 0x00	; 0
 298:	8c 2f       	mov	r24, r28
 29a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_write>
}
 29e:	cf 91       	pop	r28
 2a0:	08 95       	ret

000002a2 <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 2a2:	61 11       	cpse	r22, r1
 2a4:	04 c0       	rjmp	.+8      	; 0x2ae <lcd_gotoxy+0xc>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 2a6:	80 58       	subi	r24, 0x80	; 128
 2a8:	0e 94 47 01 	call	0x28e	; 0x28e <lcd_command>
 2ac:	08 95       	ret
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 2ae:	80 54       	subi	r24, 0x40	; 64
 2b0:	0e 94 47 01 	call	0x28e	; 0x28e <lcd_command>
 2b4:	08 95       	ret

000002b6 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	0e 94 47 01 	call	0x28e	; 0x28e <lcd_command>
 2bc:	08 95       	ret

000002be <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 2be:	82 e0       	ldi	r24, 0x02	; 2
 2c0:	0e 94 47 01 	call	0x28e	; 0x28e <lcd_command>
 2c4:	08 95       	ret

000002c6 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 2c6:	cf 93       	push	r28
 2c8:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 2ca:	0e 94 3c 01 	call	0x278	; 0x278 <lcd_waitbusy>
    if (c=='\n')
 2ce:	ca 30       	cpi	r28, 0x0A	; 10
 2d0:	49 f4       	brne	.+18     	; 0x2e4 <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 2d2:	80 34       	cpi	r24, 0x40	; 64
 2d4:	10 f4       	brcc	.+4      	; 0x2da <lcd_putc+0x14>
        addressCounter = LCD_START_LINE2;
 2d6:	80 e4       	ldi	r24, 0x40	; 64
 2d8:	01 c0       	rjmp	.+2      	; 0x2dc <lcd_putc+0x16>
    else
        addressCounter = LCD_START_LINE1;
 2da:	80 e0       	ldi	r24, 0x00	; 0
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 2dc:	80 58       	subi	r24, 0x80	; 128
 2de:	0e 94 47 01 	call	0x28e	; 0x28e <lcd_command>
 2e2:	04 c0       	rjmp	.+8      	; 0x2ec <lcd_putc+0x26>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 2e4:	61 e0       	ldi	r22, 0x01	; 1
 2e6:	8c 2f       	mov	r24, r28
 2e8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_write>
    }

}/* lcd_putc */
 2ec:	cf 91       	pop	r28
 2ee:	08 95       	ret

000002f0 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
    register char c;

    while ( (c = *s++) ) {
 2f4:	ec 01       	movw	r28, r24
 2f6:	21 96       	adiw	r28, 0x01	; 1
 2f8:	fc 01       	movw	r30, r24
 2fa:	80 81       	ld	r24, Z
 2fc:	88 23       	and	r24, r24
 2fe:	29 f0       	breq	.+10     	; 0x30a <lcd_puts+0x1a>
        lcd_putc(c);
 300:	0e 94 63 01 	call	0x2c6	; 0x2c6 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 304:	89 91       	ld	r24, Y+
 306:	81 11       	cpse	r24, r1
 308:	fb cf       	rjmp	.-10     	; 0x300 <lcd_puts+0x10>
        lcd_putc(c);
    }

}/* lcd_puts */
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	08 95       	ret

00000310 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 310:	cf 93       	push	r28
 312:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 314:	52 9a       	sbi	0x0a, 2	; 10
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 316:	53 9a       	sbi	0x0a, 3	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 318:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 31a:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 31c:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 31e:	57 9a       	sbi	0x0a, 7	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 320:	20 9a       	sbi	0x04, 0	; 4
 322:	8f e9       	ldi	r24, 0x9F	; 159
 324:	9f e0       	ldi	r25, 0x0F	; 15
 326:	01 97       	sbiw	r24, 0x01	; 1
 328:	f1 f7       	brne	.-4      	; 0x326 <lcd_init+0x16>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <lcd_init+0x1c>
 32c:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 32e:	5e 9a       	sbi	0x0b, 6	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 330:	5d 9a       	sbi	0x0b, 5	; 11
    lcd_e_toggle();
 332:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <toggle_e>
 336:	81 ee       	ldi	r24, 0xE1	; 225
 338:	94 e0       	ldi	r25, 0x04	; 4
 33a:	01 97       	sbiw	r24, 0x01	; 1
 33c:	f1 f7       	brne	.-4      	; 0x33a <lcd_init+0x2a>
 33e:	00 c0       	rjmp	.+0      	; 0x340 <lcd_init+0x30>
 340:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 342:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <toggle_e>
 346:	95 e1       	ldi	r25, 0x15	; 21
 348:	9a 95       	dec	r25
 34a:	f1 f7       	brne	.-4      	; 0x348 <lcd_init+0x38>
 34c:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 34e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <toggle_e>
 352:	85 e1       	ldi	r24, 0x15	; 21
 354:	8a 95       	dec	r24
 356:	f1 f7       	brne	.-4      	; 0x354 <lcd_init+0x44>
 358:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 35a:	5d 98       	cbi	0x0b, 5	; 11
    lcd_e_toggle();
 35c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <toggle_e>
 360:	95 e1       	ldi	r25, 0x15	; 21
 362:	9a 95       	dec	r25
 364:	f1 f7       	brne	.-4      	; 0x362 <lcd_init+0x52>
 366:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 368:	88 e2       	ldi	r24, 0x28	; 40
 36a:	0e 94 47 01 	call	0x28e	; 0x28e <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 36e:	88 e0       	ldi	r24, 0x08	; 8
 370:	0e 94 47 01 	call	0x28e	; 0x28e <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 374:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 378:	86 e0       	ldi	r24, 0x06	; 6
 37a:	0e 94 47 01 	call	0x28e	; 0x28e <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 37e:	8c 2f       	mov	r24, r28
 380:	0e 94 47 01 	call	0x28e	; 0x28e <lcd_command>

}/* lcd_init */
 384:	cf 91       	pop	r28
 386:	08 95       	ret

00000388 <__divmodsi4>:
 388:	05 2e       	mov	r0, r21
 38a:	97 fb       	bst	r25, 7
 38c:	1e f4       	brtc	.+6      	; 0x394 <__divmodsi4+0xc>
 38e:	00 94       	com	r0
 390:	0e 94 db 01 	call	0x3b6	; 0x3b6 <__negsi2>
 394:	57 fd       	sbrc	r21, 7
 396:	07 d0       	rcall	.+14     	; 0x3a6 <__divmodsi4_neg2>
 398:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__udivmodsi4>
 39c:	07 fc       	sbrc	r0, 7
 39e:	03 d0       	rcall	.+6      	; 0x3a6 <__divmodsi4_neg2>
 3a0:	4e f4       	brtc	.+18     	; 0x3b4 <__divmodsi4_exit>
 3a2:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__negsi2>

000003a6 <__divmodsi4_neg2>:
 3a6:	50 95       	com	r21
 3a8:	40 95       	com	r20
 3aa:	30 95       	com	r19
 3ac:	21 95       	neg	r18
 3ae:	3f 4f       	sbci	r19, 0xFF	; 255
 3b0:	4f 4f       	sbci	r20, 0xFF	; 255
 3b2:	5f 4f       	sbci	r21, 0xFF	; 255

000003b4 <__divmodsi4_exit>:
 3b4:	08 95       	ret

000003b6 <__negsi2>:
 3b6:	90 95       	com	r25
 3b8:	80 95       	com	r24
 3ba:	70 95       	com	r23
 3bc:	61 95       	neg	r22
 3be:	7f 4f       	sbci	r23, 0xFF	; 255
 3c0:	8f 4f       	sbci	r24, 0xFF	; 255
 3c2:	9f 4f       	sbci	r25, 0xFF	; 255
 3c4:	08 95       	ret

000003c6 <__umulhisi3>:
 3c6:	a2 9f       	mul	r26, r18
 3c8:	b0 01       	movw	r22, r0
 3ca:	b3 9f       	mul	r27, r19
 3cc:	c0 01       	movw	r24, r0
 3ce:	a3 9f       	mul	r26, r19
 3d0:	70 0d       	add	r23, r0
 3d2:	81 1d       	adc	r24, r1
 3d4:	11 24       	eor	r1, r1
 3d6:	91 1d       	adc	r25, r1
 3d8:	b2 9f       	mul	r27, r18
 3da:	70 0d       	add	r23, r0
 3dc:	81 1d       	adc	r24, r1
 3de:	11 24       	eor	r1, r1
 3e0:	91 1d       	adc	r25, r1
 3e2:	08 95       	ret

000003e4 <__udivmodsi4>:
 3e4:	a1 e2       	ldi	r26, 0x21	; 33
 3e6:	1a 2e       	mov	r1, r26
 3e8:	aa 1b       	sub	r26, r26
 3ea:	bb 1b       	sub	r27, r27
 3ec:	fd 01       	movw	r30, r26
 3ee:	0d c0       	rjmp	.+26     	; 0x40a <__udivmodsi4_ep>

000003f0 <__udivmodsi4_loop>:
 3f0:	aa 1f       	adc	r26, r26
 3f2:	bb 1f       	adc	r27, r27
 3f4:	ee 1f       	adc	r30, r30
 3f6:	ff 1f       	adc	r31, r31
 3f8:	a2 17       	cp	r26, r18
 3fa:	b3 07       	cpc	r27, r19
 3fc:	e4 07       	cpc	r30, r20
 3fe:	f5 07       	cpc	r31, r21
 400:	20 f0       	brcs	.+8      	; 0x40a <__udivmodsi4_ep>
 402:	a2 1b       	sub	r26, r18
 404:	b3 0b       	sbc	r27, r19
 406:	e4 0b       	sbc	r30, r20
 408:	f5 0b       	sbc	r31, r21

0000040a <__udivmodsi4_ep>:
 40a:	66 1f       	adc	r22, r22
 40c:	77 1f       	adc	r23, r23
 40e:	88 1f       	adc	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	1a 94       	dec	r1
 414:	69 f7       	brne	.-38     	; 0x3f0 <__udivmodsi4_loop>
 416:	60 95       	com	r22
 418:	70 95       	com	r23
 41a:	80 95       	com	r24
 41c:	90 95       	com	r25
 41e:	9b 01       	movw	r18, r22
 420:	ac 01       	movw	r20, r24
 422:	bd 01       	movw	r22, r26
 424:	cf 01       	movw	r24, r30
 426:	08 95       	ret

00000428 <sprintf>:
 428:	ae e0       	ldi	r26, 0x0E	; 14
 42a:	b0 e0       	ldi	r27, 0x00	; 0
 42c:	ea e1       	ldi	r30, 0x1A	; 26
 42e:	f2 e0       	ldi	r31, 0x02	; 2
 430:	0c 94 bc 04 	jmp	0x978	; 0x978 <__prologue_saves__+0x1c>
 434:	0d 89       	ldd	r16, Y+21	; 0x15
 436:	1e 89       	ldd	r17, Y+22	; 0x16
 438:	86 e0       	ldi	r24, 0x06	; 6
 43a:	8c 83       	std	Y+4, r24	; 0x04
 43c:	1a 83       	std	Y+2, r17	; 0x02
 43e:	09 83       	std	Y+1, r16	; 0x01
 440:	8f ef       	ldi	r24, 0xFF	; 255
 442:	9f e7       	ldi	r25, 0x7F	; 127
 444:	9e 83       	std	Y+6, r25	; 0x06
 446:	8d 83       	std	Y+5, r24	; 0x05
 448:	ae 01       	movw	r20, r28
 44a:	47 5e       	subi	r20, 0xE7	; 231
 44c:	5f 4f       	sbci	r21, 0xFF	; 255
 44e:	6f 89       	ldd	r22, Y+23	; 0x17
 450:	78 8d       	ldd	r23, Y+24	; 0x18
 452:	ce 01       	movw	r24, r28
 454:	01 96       	adiw	r24, 0x01	; 1
 456:	0e 94 36 02 	call	0x46c	; 0x46c <vfprintf>
 45a:	ef 81       	ldd	r30, Y+7	; 0x07
 45c:	f8 85       	ldd	r31, Y+8	; 0x08
 45e:	e0 0f       	add	r30, r16
 460:	f1 1f       	adc	r31, r17
 462:	10 82       	st	Z, r1
 464:	2e 96       	adiw	r28, 0x0e	; 14
 466:	e4 e0       	ldi	r30, 0x04	; 4
 468:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__epilogue_restores__+0x1c>

0000046c <vfprintf>:
 46c:	ac e0       	ldi	r26, 0x0C	; 12
 46e:	b0 e0       	ldi	r27, 0x00	; 0
 470:	ec e3       	ldi	r30, 0x3C	; 60
 472:	f2 e0       	ldi	r31, 0x02	; 2
 474:	0c 94 ae 04 	jmp	0x95c	; 0x95c <__prologue_saves__>
 478:	7c 01       	movw	r14, r24
 47a:	6b 01       	movw	r12, r22
 47c:	8a 01       	movw	r16, r20
 47e:	fc 01       	movw	r30, r24
 480:	17 82       	std	Z+7, r1	; 0x07
 482:	16 82       	std	Z+6, r1	; 0x06
 484:	83 81       	ldd	r24, Z+3	; 0x03
 486:	81 ff       	sbrs	r24, 1
 488:	bd c1       	rjmp	.+890    	; 0x804 <vfprintf+0x398>
 48a:	ce 01       	movw	r24, r28
 48c:	01 96       	adiw	r24, 0x01	; 1
 48e:	4c 01       	movw	r8, r24
 490:	f7 01       	movw	r30, r14
 492:	93 81       	ldd	r25, Z+3	; 0x03
 494:	f6 01       	movw	r30, r12
 496:	93 fd       	sbrc	r25, 3
 498:	85 91       	lpm	r24, Z+
 49a:	93 ff       	sbrs	r25, 3
 49c:	81 91       	ld	r24, Z+
 49e:	6f 01       	movw	r12, r30
 4a0:	88 23       	and	r24, r24
 4a2:	09 f4       	brne	.+2      	; 0x4a6 <vfprintf+0x3a>
 4a4:	ab c1       	rjmp	.+854    	; 0x7fc <vfprintf+0x390>
 4a6:	85 32       	cpi	r24, 0x25	; 37
 4a8:	39 f4       	brne	.+14     	; 0x4b8 <vfprintf+0x4c>
 4aa:	93 fd       	sbrc	r25, 3
 4ac:	85 91       	lpm	r24, Z+
 4ae:	93 ff       	sbrs	r25, 3
 4b0:	81 91       	ld	r24, Z+
 4b2:	6f 01       	movw	r12, r30
 4b4:	85 32       	cpi	r24, 0x25	; 37
 4b6:	29 f4       	brne	.+10     	; 0x4c2 <vfprintf+0x56>
 4b8:	b7 01       	movw	r22, r14
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	0e 94 1e 04 	call	0x83c	; 0x83c <fputc>
 4c0:	e7 cf       	rjmp	.-50     	; 0x490 <vfprintf+0x24>
 4c2:	51 2c       	mov	r5, r1
 4c4:	31 2c       	mov	r3, r1
 4c6:	20 e0       	ldi	r18, 0x00	; 0
 4c8:	20 32       	cpi	r18, 0x20	; 32
 4ca:	a0 f4       	brcc	.+40     	; 0x4f4 <vfprintf+0x88>
 4cc:	8b 32       	cpi	r24, 0x2B	; 43
 4ce:	69 f0       	breq	.+26     	; 0x4ea <vfprintf+0x7e>
 4d0:	30 f4       	brcc	.+12     	; 0x4de <vfprintf+0x72>
 4d2:	80 32       	cpi	r24, 0x20	; 32
 4d4:	59 f0       	breq	.+22     	; 0x4ec <vfprintf+0x80>
 4d6:	83 32       	cpi	r24, 0x23	; 35
 4d8:	69 f4       	brne	.+26     	; 0x4f4 <vfprintf+0x88>
 4da:	20 61       	ori	r18, 0x10	; 16
 4dc:	2c c0       	rjmp	.+88     	; 0x536 <vfprintf+0xca>
 4de:	8d 32       	cpi	r24, 0x2D	; 45
 4e0:	39 f0       	breq	.+14     	; 0x4f0 <vfprintf+0x84>
 4e2:	80 33       	cpi	r24, 0x30	; 48
 4e4:	39 f4       	brne	.+14     	; 0x4f4 <vfprintf+0x88>
 4e6:	21 60       	ori	r18, 0x01	; 1
 4e8:	26 c0       	rjmp	.+76     	; 0x536 <vfprintf+0xca>
 4ea:	22 60       	ori	r18, 0x02	; 2
 4ec:	24 60       	ori	r18, 0x04	; 4
 4ee:	23 c0       	rjmp	.+70     	; 0x536 <vfprintf+0xca>
 4f0:	28 60       	ori	r18, 0x08	; 8
 4f2:	21 c0       	rjmp	.+66     	; 0x536 <vfprintf+0xca>
 4f4:	27 fd       	sbrc	r18, 7
 4f6:	27 c0       	rjmp	.+78     	; 0x546 <vfprintf+0xda>
 4f8:	30 ed       	ldi	r19, 0xD0	; 208
 4fa:	38 0f       	add	r19, r24
 4fc:	3a 30       	cpi	r19, 0x0A	; 10
 4fe:	78 f4       	brcc	.+30     	; 0x51e <vfprintf+0xb2>
 500:	26 ff       	sbrs	r18, 6
 502:	06 c0       	rjmp	.+12     	; 0x510 <vfprintf+0xa4>
 504:	fa e0       	ldi	r31, 0x0A	; 10
 506:	5f 9e       	mul	r5, r31
 508:	30 0d       	add	r19, r0
 50a:	11 24       	eor	r1, r1
 50c:	53 2e       	mov	r5, r19
 50e:	13 c0       	rjmp	.+38     	; 0x536 <vfprintf+0xca>
 510:	8a e0       	ldi	r24, 0x0A	; 10
 512:	38 9e       	mul	r3, r24
 514:	30 0d       	add	r19, r0
 516:	11 24       	eor	r1, r1
 518:	33 2e       	mov	r3, r19
 51a:	20 62       	ori	r18, 0x20	; 32
 51c:	0c c0       	rjmp	.+24     	; 0x536 <vfprintf+0xca>
 51e:	8e 32       	cpi	r24, 0x2E	; 46
 520:	21 f4       	brne	.+8      	; 0x52a <vfprintf+0xbe>
 522:	26 fd       	sbrc	r18, 6
 524:	6b c1       	rjmp	.+726    	; 0x7fc <vfprintf+0x390>
 526:	20 64       	ori	r18, 0x40	; 64
 528:	06 c0       	rjmp	.+12     	; 0x536 <vfprintf+0xca>
 52a:	8c 36       	cpi	r24, 0x6C	; 108
 52c:	11 f4       	brne	.+4      	; 0x532 <vfprintf+0xc6>
 52e:	20 68       	ori	r18, 0x80	; 128
 530:	02 c0       	rjmp	.+4      	; 0x536 <vfprintf+0xca>
 532:	88 36       	cpi	r24, 0x68	; 104
 534:	41 f4       	brne	.+16     	; 0x546 <vfprintf+0xda>
 536:	f6 01       	movw	r30, r12
 538:	93 fd       	sbrc	r25, 3
 53a:	85 91       	lpm	r24, Z+
 53c:	93 ff       	sbrs	r25, 3
 53e:	81 91       	ld	r24, Z+
 540:	6f 01       	movw	r12, r30
 542:	81 11       	cpse	r24, r1
 544:	c1 cf       	rjmp	.-126    	; 0x4c8 <vfprintf+0x5c>
 546:	98 2f       	mov	r25, r24
 548:	9f 7d       	andi	r25, 0xDF	; 223
 54a:	95 54       	subi	r25, 0x45	; 69
 54c:	93 30       	cpi	r25, 0x03	; 3
 54e:	28 f4       	brcc	.+10     	; 0x55a <vfprintf+0xee>
 550:	0c 5f       	subi	r16, 0xFC	; 252
 552:	1f 4f       	sbci	r17, 0xFF	; 255
 554:	ff e3       	ldi	r31, 0x3F	; 63
 556:	f9 83       	std	Y+1, r31	; 0x01
 558:	0d c0       	rjmp	.+26     	; 0x574 <vfprintf+0x108>
 55a:	83 36       	cpi	r24, 0x63	; 99
 55c:	31 f0       	breq	.+12     	; 0x56a <vfprintf+0xfe>
 55e:	83 37       	cpi	r24, 0x73	; 115
 560:	71 f0       	breq	.+28     	; 0x57e <vfprintf+0x112>
 562:	83 35       	cpi	r24, 0x53	; 83
 564:	09 f0       	breq	.+2      	; 0x568 <vfprintf+0xfc>
 566:	5b c0       	rjmp	.+182    	; 0x61e <vfprintf+0x1b2>
 568:	22 c0       	rjmp	.+68     	; 0x5ae <vfprintf+0x142>
 56a:	f8 01       	movw	r30, r16
 56c:	80 81       	ld	r24, Z
 56e:	89 83       	std	Y+1, r24	; 0x01
 570:	0e 5f       	subi	r16, 0xFE	; 254
 572:	1f 4f       	sbci	r17, 0xFF	; 255
 574:	44 24       	eor	r4, r4
 576:	43 94       	inc	r4
 578:	51 2c       	mov	r5, r1
 57a:	54 01       	movw	r10, r8
 57c:	15 c0       	rjmp	.+42     	; 0x5a8 <vfprintf+0x13c>
 57e:	38 01       	movw	r6, r16
 580:	f2 e0       	ldi	r31, 0x02	; 2
 582:	6f 0e       	add	r6, r31
 584:	71 1c       	adc	r7, r1
 586:	f8 01       	movw	r30, r16
 588:	a0 80       	ld	r10, Z
 58a:	b1 80       	ldd	r11, Z+1	; 0x01
 58c:	26 ff       	sbrs	r18, 6
 58e:	03 c0       	rjmp	.+6      	; 0x596 <vfprintf+0x12a>
 590:	65 2d       	mov	r22, r5
 592:	70 e0       	ldi	r23, 0x00	; 0
 594:	02 c0       	rjmp	.+4      	; 0x59a <vfprintf+0x12e>
 596:	6f ef       	ldi	r22, 0xFF	; 255
 598:	7f ef       	ldi	r23, 0xFF	; 255
 59a:	c5 01       	movw	r24, r10
 59c:	2c 87       	std	Y+12, r18	; 0x0c
 59e:	0e 94 13 04 	call	0x826	; 0x826 <strnlen>
 5a2:	2c 01       	movw	r4, r24
 5a4:	83 01       	movw	r16, r6
 5a6:	2c 85       	ldd	r18, Y+12	; 0x0c
 5a8:	2f 77       	andi	r18, 0x7F	; 127
 5aa:	22 2e       	mov	r2, r18
 5ac:	17 c0       	rjmp	.+46     	; 0x5dc <vfprintf+0x170>
 5ae:	38 01       	movw	r6, r16
 5b0:	f2 e0       	ldi	r31, 0x02	; 2
 5b2:	6f 0e       	add	r6, r31
 5b4:	71 1c       	adc	r7, r1
 5b6:	f8 01       	movw	r30, r16
 5b8:	a0 80       	ld	r10, Z
 5ba:	b1 80       	ldd	r11, Z+1	; 0x01
 5bc:	26 ff       	sbrs	r18, 6
 5be:	03 c0       	rjmp	.+6      	; 0x5c6 <vfprintf+0x15a>
 5c0:	65 2d       	mov	r22, r5
 5c2:	70 e0       	ldi	r23, 0x00	; 0
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <vfprintf+0x15e>
 5c6:	6f ef       	ldi	r22, 0xFF	; 255
 5c8:	7f ef       	ldi	r23, 0xFF	; 255
 5ca:	c5 01       	movw	r24, r10
 5cc:	2c 87       	std	Y+12, r18	; 0x0c
 5ce:	0e 94 08 04 	call	0x810	; 0x810 <strnlen_P>
 5d2:	2c 01       	movw	r4, r24
 5d4:	2c 85       	ldd	r18, Y+12	; 0x0c
 5d6:	20 68       	ori	r18, 0x80	; 128
 5d8:	22 2e       	mov	r2, r18
 5da:	83 01       	movw	r16, r6
 5dc:	23 fc       	sbrc	r2, 3
 5de:	1b c0       	rjmp	.+54     	; 0x616 <vfprintf+0x1aa>
 5e0:	83 2d       	mov	r24, r3
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	48 16       	cp	r4, r24
 5e6:	59 06       	cpc	r5, r25
 5e8:	b0 f4       	brcc	.+44     	; 0x616 <vfprintf+0x1aa>
 5ea:	b7 01       	movw	r22, r14
 5ec:	80 e2       	ldi	r24, 0x20	; 32
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	0e 94 1e 04 	call	0x83c	; 0x83c <fputc>
 5f4:	3a 94       	dec	r3
 5f6:	f4 cf       	rjmp	.-24     	; 0x5e0 <vfprintf+0x174>
 5f8:	f5 01       	movw	r30, r10
 5fa:	27 fc       	sbrc	r2, 7
 5fc:	85 91       	lpm	r24, Z+
 5fe:	27 fe       	sbrs	r2, 7
 600:	81 91       	ld	r24, Z+
 602:	5f 01       	movw	r10, r30
 604:	b7 01       	movw	r22, r14
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	0e 94 1e 04 	call	0x83c	; 0x83c <fputc>
 60c:	31 10       	cpse	r3, r1
 60e:	3a 94       	dec	r3
 610:	f1 e0       	ldi	r31, 0x01	; 1
 612:	4f 1a       	sub	r4, r31
 614:	51 08       	sbc	r5, r1
 616:	41 14       	cp	r4, r1
 618:	51 04       	cpc	r5, r1
 61a:	71 f7       	brne	.-36     	; 0x5f8 <vfprintf+0x18c>
 61c:	e5 c0       	rjmp	.+458    	; 0x7e8 <vfprintf+0x37c>
 61e:	84 36       	cpi	r24, 0x64	; 100
 620:	11 f0       	breq	.+4      	; 0x626 <vfprintf+0x1ba>
 622:	89 36       	cpi	r24, 0x69	; 105
 624:	39 f5       	brne	.+78     	; 0x674 <vfprintf+0x208>
 626:	f8 01       	movw	r30, r16
 628:	27 ff       	sbrs	r18, 7
 62a:	07 c0       	rjmp	.+14     	; 0x63a <vfprintf+0x1ce>
 62c:	60 81       	ld	r22, Z
 62e:	71 81       	ldd	r23, Z+1	; 0x01
 630:	82 81       	ldd	r24, Z+2	; 0x02
 632:	93 81       	ldd	r25, Z+3	; 0x03
 634:	0c 5f       	subi	r16, 0xFC	; 252
 636:	1f 4f       	sbci	r17, 0xFF	; 255
 638:	08 c0       	rjmp	.+16     	; 0x64a <vfprintf+0x1de>
 63a:	60 81       	ld	r22, Z
 63c:	71 81       	ldd	r23, Z+1	; 0x01
 63e:	88 27       	eor	r24, r24
 640:	77 fd       	sbrc	r23, 7
 642:	80 95       	com	r24
 644:	98 2f       	mov	r25, r24
 646:	0e 5f       	subi	r16, 0xFE	; 254
 648:	1f 4f       	sbci	r17, 0xFF	; 255
 64a:	2f 76       	andi	r18, 0x6F	; 111
 64c:	b2 2e       	mov	r11, r18
 64e:	97 ff       	sbrs	r25, 7
 650:	09 c0       	rjmp	.+18     	; 0x664 <vfprintf+0x1f8>
 652:	90 95       	com	r25
 654:	80 95       	com	r24
 656:	70 95       	com	r23
 658:	61 95       	neg	r22
 65a:	7f 4f       	sbci	r23, 0xFF	; 255
 65c:	8f 4f       	sbci	r24, 0xFF	; 255
 65e:	9f 4f       	sbci	r25, 0xFF	; 255
 660:	20 68       	ori	r18, 0x80	; 128
 662:	b2 2e       	mov	r11, r18
 664:	2a e0       	ldi	r18, 0x0A	; 10
 666:	30 e0       	ldi	r19, 0x00	; 0
 668:	a4 01       	movw	r20, r8
 66a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__ultoa_invert>
 66e:	a8 2e       	mov	r10, r24
 670:	a8 18       	sub	r10, r8
 672:	44 c0       	rjmp	.+136    	; 0x6fc <vfprintf+0x290>
 674:	85 37       	cpi	r24, 0x75	; 117
 676:	29 f4       	brne	.+10     	; 0x682 <vfprintf+0x216>
 678:	2f 7e       	andi	r18, 0xEF	; 239
 67a:	b2 2e       	mov	r11, r18
 67c:	2a e0       	ldi	r18, 0x0A	; 10
 67e:	30 e0       	ldi	r19, 0x00	; 0
 680:	25 c0       	rjmp	.+74     	; 0x6cc <vfprintf+0x260>
 682:	f2 2f       	mov	r31, r18
 684:	f9 7f       	andi	r31, 0xF9	; 249
 686:	bf 2e       	mov	r11, r31
 688:	8f 36       	cpi	r24, 0x6F	; 111
 68a:	c1 f0       	breq	.+48     	; 0x6bc <vfprintf+0x250>
 68c:	18 f4       	brcc	.+6      	; 0x694 <vfprintf+0x228>
 68e:	88 35       	cpi	r24, 0x58	; 88
 690:	79 f0       	breq	.+30     	; 0x6b0 <vfprintf+0x244>
 692:	b4 c0       	rjmp	.+360    	; 0x7fc <vfprintf+0x390>
 694:	80 37       	cpi	r24, 0x70	; 112
 696:	19 f0       	breq	.+6      	; 0x69e <vfprintf+0x232>
 698:	88 37       	cpi	r24, 0x78	; 120
 69a:	21 f0       	breq	.+8      	; 0x6a4 <vfprintf+0x238>
 69c:	af c0       	rjmp	.+350    	; 0x7fc <vfprintf+0x390>
 69e:	2f 2f       	mov	r18, r31
 6a0:	20 61       	ori	r18, 0x10	; 16
 6a2:	b2 2e       	mov	r11, r18
 6a4:	b4 fe       	sbrs	r11, 4
 6a6:	0d c0       	rjmp	.+26     	; 0x6c2 <vfprintf+0x256>
 6a8:	8b 2d       	mov	r24, r11
 6aa:	84 60       	ori	r24, 0x04	; 4
 6ac:	b8 2e       	mov	r11, r24
 6ae:	09 c0       	rjmp	.+18     	; 0x6c2 <vfprintf+0x256>
 6b0:	24 ff       	sbrs	r18, 4
 6b2:	0a c0       	rjmp	.+20     	; 0x6c8 <vfprintf+0x25c>
 6b4:	9f 2f       	mov	r25, r31
 6b6:	96 60       	ori	r25, 0x06	; 6
 6b8:	b9 2e       	mov	r11, r25
 6ba:	06 c0       	rjmp	.+12     	; 0x6c8 <vfprintf+0x25c>
 6bc:	28 e0       	ldi	r18, 0x08	; 8
 6be:	30 e0       	ldi	r19, 0x00	; 0
 6c0:	05 c0       	rjmp	.+10     	; 0x6cc <vfprintf+0x260>
 6c2:	20 e1       	ldi	r18, 0x10	; 16
 6c4:	30 e0       	ldi	r19, 0x00	; 0
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <vfprintf+0x260>
 6c8:	20 e1       	ldi	r18, 0x10	; 16
 6ca:	32 e0       	ldi	r19, 0x02	; 2
 6cc:	f8 01       	movw	r30, r16
 6ce:	b7 fe       	sbrs	r11, 7
 6d0:	07 c0       	rjmp	.+14     	; 0x6e0 <vfprintf+0x274>
 6d2:	60 81       	ld	r22, Z
 6d4:	71 81       	ldd	r23, Z+1	; 0x01
 6d6:	82 81       	ldd	r24, Z+2	; 0x02
 6d8:	93 81       	ldd	r25, Z+3	; 0x03
 6da:	0c 5f       	subi	r16, 0xFC	; 252
 6dc:	1f 4f       	sbci	r17, 0xFF	; 255
 6de:	06 c0       	rjmp	.+12     	; 0x6ec <vfprintf+0x280>
 6e0:	60 81       	ld	r22, Z
 6e2:	71 81       	ldd	r23, Z+1	; 0x01
 6e4:	80 e0       	ldi	r24, 0x00	; 0
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	0e 5f       	subi	r16, 0xFE	; 254
 6ea:	1f 4f       	sbci	r17, 0xFF	; 255
 6ec:	a4 01       	movw	r20, r8
 6ee:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__ultoa_invert>
 6f2:	a8 2e       	mov	r10, r24
 6f4:	a8 18       	sub	r10, r8
 6f6:	fb 2d       	mov	r31, r11
 6f8:	ff 77       	andi	r31, 0x7F	; 127
 6fa:	bf 2e       	mov	r11, r31
 6fc:	b6 fe       	sbrs	r11, 6
 6fe:	0b c0       	rjmp	.+22     	; 0x716 <vfprintf+0x2aa>
 700:	2b 2d       	mov	r18, r11
 702:	2e 7f       	andi	r18, 0xFE	; 254
 704:	a5 14       	cp	r10, r5
 706:	50 f4       	brcc	.+20     	; 0x71c <vfprintf+0x2b0>
 708:	b4 fe       	sbrs	r11, 4
 70a:	0a c0       	rjmp	.+20     	; 0x720 <vfprintf+0x2b4>
 70c:	b2 fc       	sbrc	r11, 2
 70e:	08 c0       	rjmp	.+16     	; 0x720 <vfprintf+0x2b4>
 710:	2b 2d       	mov	r18, r11
 712:	2e 7e       	andi	r18, 0xEE	; 238
 714:	05 c0       	rjmp	.+10     	; 0x720 <vfprintf+0x2b4>
 716:	7a 2c       	mov	r7, r10
 718:	2b 2d       	mov	r18, r11
 71a:	03 c0       	rjmp	.+6      	; 0x722 <vfprintf+0x2b6>
 71c:	7a 2c       	mov	r7, r10
 71e:	01 c0       	rjmp	.+2      	; 0x722 <vfprintf+0x2b6>
 720:	75 2c       	mov	r7, r5
 722:	24 ff       	sbrs	r18, 4
 724:	0d c0       	rjmp	.+26     	; 0x740 <vfprintf+0x2d4>
 726:	fe 01       	movw	r30, r28
 728:	ea 0d       	add	r30, r10
 72a:	f1 1d       	adc	r31, r1
 72c:	80 81       	ld	r24, Z
 72e:	80 33       	cpi	r24, 0x30	; 48
 730:	11 f4       	brne	.+4      	; 0x736 <vfprintf+0x2ca>
 732:	29 7e       	andi	r18, 0xE9	; 233
 734:	09 c0       	rjmp	.+18     	; 0x748 <vfprintf+0x2dc>
 736:	22 ff       	sbrs	r18, 2
 738:	06 c0       	rjmp	.+12     	; 0x746 <vfprintf+0x2da>
 73a:	73 94       	inc	r7
 73c:	73 94       	inc	r7
 73e:	04 c0       	rjmp	.+8      	; 0x748 <vfprintf+0x2dc>
 740:	82 2f       	mov	r24, r18
 742:	86 78       	andi	r24, 0x86	; 134
 744:	09 f0       	breq	.+2      	; 0x748 <vfprintf+0x2dc>
 746:	73 94       	inc	r7
 748:	23 fd       	sbrc	r18, 3
 74a:	13 c0       	rjmp	.+38     	; 0x772 <vfprintf+0x306>
 74c:	20 ff       	sbrs	r18, 0
 74e:	06 c0       	rjmp	.+12     	; 0x75c <vfprintf+0x2f0>
 750:	5a 2c       	mov	r5, r10
 752:	73 14       	cp	r7, r3
 754:	18 f4       	brcc	.+6      	; 0x75c <vfprintf+0x2f0>
 756:	53 0c       	add	r5, r3
 758:	57 18       	sub	r5, r7
 75a:	73 2c       	mov	r7, r3
 75c:	73 14       	cp	r7, r3
 75e:	68 f4       	brcc	.+26     	; 0x77a <vfprintf+0x30e>
 760:	b7 01       	movw	r22, r14
 762:	80 e2       	ldi	r24, 0x20	; 32
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	2c 87       	std	Y+12, r18	; 0x0c
 768:	0e 94 1e 04 	call	0x83c	; 0x83c <fputc>
 76c:	73 94       	inc	r7
 76e:	2c 85       	ldd	r18, Y+12	; 0x0c
 770:	f5 cf       	rjmp	.-22     	; 0x75c <vfprintf+0x2f0>
 772:	73 14       	cp	r7, r3
 774:	10 f4       	brcc	.+4      	; 0x77a <vfprintf+0x30e>
 776:	37 18       	sub	r3, r7
 778:	01 c0       	rjmp	.+2      	; 0x77c <vfprintf+0x310>
 77a:	31 2c       	mov	r3, r1
 77c:	24 ff       	sbrs	r18, 4
 77e:	12 c0       	rjmp	.+36     	; 0x7a4 <vfprintf+0x338>
 780:	b7 01       	movw	r22, r14
 782:	80 e3       	ldi	r24, 0x30	; 48
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	2c 87       	std	Y+12, r18	; 0x0c
 788:	0e 94 1e 04 	call	0x83c	; 0x83c <fputc>
 78c:	2c 85       	ldd	r18, Y+12	; 0x0c
 78e:	22 ff       	sbrs	r18, 2
 790:	17 c0       	rjmp	.+46     	; 0x7c0 <vfprintf+0x354>
 792:	21 ff       	sbrs	r18, 1
 794:	03 c0       	rjmp	.+6      	; 0x79c <vfprintf+0x330>
 796:	88 e5       	ldi	r24, 0x58	; 88
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	02 c0       	rjmp	.+4      	; 0x7a0 <vfprintf+0x334>
 79c:	88 e7       	ldi	r24, 0x78	; 120
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	b7 01       	movw	r22, r14
 7a2:	0c c0       	rjmp	.+24     	; 0x7bc <vfprintf+0x350>
 7a4:	82 2f       	mov	r24, r18
 7a6:	86 78       	andi	r24, 0x86	; 134
 7a8:	59 f0       	breq	.+22     	; 0x7c0 <vfprintf+0x354>
 7aa:	21 fd       	sbrc	r18, 1
 7ac:	02 c0       	rjmp	.+4      	; 0x7b2 <vfprintf+0x346>
 7ae:	80 e2       	ldi	r24, 0x20	; 32
 7b0:	01 c0       	rjmp	.+2      	; 0x7b4 <vfprintf+0x348>
 7b2:	8b e2       	ldi	r24, 0x2B	; 43
 7b4:	27 fd       	sbrc	r18, 7
 7b6:	8d e2       	ldi	r24, 0x2D	; 45
 7b8:	b7 01       	movw	r22, r14
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	0e 94 1e 04 	call	0x83c	; 0x83c <fputc>
 7c0:	a5 14       	cp	r10, r5
 7c2:	38 f4       	brcc	.+14     	; 0x7d2 <vfprintf+0x366>
 7c4:	b7 01       	movw	r22, r14
 7c6:	80 e3       	ldi	r24, 0x30	; 48
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	0e 94 1e 04 	call	0x83c	; 0x83c <fputc>
 7ce:	5a 94       	dec	r5
 7d0:	f7 cf       	rjmp	.-18     	; 0x7c0 <vfprintf+0x354>
 7d2:	aa 94       	dec	r10
 7d4:	f4 01       	movw	r30, r8
 7d6:	ea 0d       	add	r30, r10
 7d8:	f1 1d       	adc	r31, r1
 7da:	80 81       	ld	r24, Z
 7dc:	b7 01       	movw	r22, r14
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	0e 94 1e 04 	call	0x83c	; 0x83c <fputc>
 7e4:	a1 10       	cpse	r10, r1
 7e6:	f5 cf       	rjmp	.-22     	; 0x7d2 <vfprintf+0x366>
 7e8:	33 20       	and	r3, r3
 7ea:	09 f4       	brne	.+2      	; 0x7ee <vfprintf+0x382>
 7ec:	51 ce       	rjmp	.-862    	; 0x490 <vfprintf+0x24>
 7ee:	b7 01       	movw	r22, r14
 7f0:	80 e2       	ldi	r24, 0x20	; 32
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	0e 94 1e 04 	call	0x83c	; 0x83c <fputc>
 7f8:	3a 94       	dec	r3
 7fa:	f6 cf       	rjmp	.-20     	; 0x7e8 <vfprintf+0x37c>
 7fc:	f7 01       	movw	r30, r14
 7fe:	86 81       	ldd	r24, Z+6	; 0x06
 800:	97 81       	ldd	r25, Z+7	; 0x07
 802:	02 c0       	rjmp	.+4      	; 0x808 <vfprintf+0x39c>
 804:	8f ef       	ldi	r24, 0xFF	; 255
 806:	9f ef       	ldi	r25, 0xFF	; 255
 808:	2c 96       	adiw	r28, 0x0c	; 12
 80a:	e2 e1       	ldi	r30, 0x12	; 18
 80c:	0c 94 ca 04 	jmp	0x994	; 0x994 <__epilogue_restores__>

00000810 <strnlen_P>:
 810:	fc 01       	movw	r30, r24
 812:	05 90       	lpm	r0, Z+
 814:	61 50       	subi	r22, 0x01	; 1
 816:	70 40       	sbci	r23, 0x00	; 0
 818:	01 10       	cpse	r0, r1
 81a:	d8 f7       	brcc	.-10     	; 0x812 <strnlen_P+0x2>
 81c:	80 95       	com	r24
 81e:	90 95       	com	r25
 820:	8e 0f       	add	r24, r30
 822:	9f 1f       	adc	r25, r31
 824:	08 95       	ret

00000826 <strnlen>:
 826:	fc 01       	movw	r30, r24
 828:	61 50       	subi	r22, 0x01	; 1
 82a:	70 40       	sbci	r23, 0x00	; 0
 82c:	01 90       	ld	r0, Z+
 82e:	01 10       	cpse	r0, r1
 830:	d8 f7       	brcc	.-10     	; 0x828 <strnlen+0x2>
 832:	80 95       	com	r24
 834:	90 95       	com	r25
 836:	8e 0f       	add	r24, r30
 838:	9f 1f       	adc	r25, r31
 83a:	08 95       	ret

0000083c <fputc>:
 83c:	0f 93       	push	r16
 83e:	1f 93       	push	r17
 840:	cf 93       	push	r28
 842:	df 93       	push	r29
 844:	18 2f       	mov	r17, r24
 846:	09 2f       	mov	r16, r25
 848:	eb 01       	movw	r28, r22
 84a:	8b 81       	ldd	r24, Y+3	; 0x03
 84c:	81 fd       	sbrc	r24, 1
 84e:	03 c0       	rjmp	.+6      	; 0x856 <fputc+0x1a>
 850:	8f ef       	ldi	r24, 0xFF	; 255
 852:	9f ef       	ldi	r25, 0xFF	; 255
 854:	20 c0       	rjmp	.+64     	; 0x896 <fputc+0x5a>
 856:	82 ff       	sbrs	r24, 2
 858:	10 c0       	rjmp	.+32     	; 0x87a <fputc+0x3e>
 85a:	4e 81       	ldd	r20, Y+6	; 0x06
 85c:	5f 81       	ldd	r21, Y+7	; 0x07
 85e:	2c 81       	ldd	r18, Y+4	; 0x04
 860:	3d 81       	ldd	r19, Y+5	; 0x05
 862:	42 17       	cp	r20, r18
 864:	53 07       	cpc	r21, r19
 866:	7c f4       	brge	.+30     	; 0x886 <fputc+0x4a>
 868:	e8 81       	ld	r30, Y
 86a:	f9 81       	ldd	r31, Y+1	; 0x01
 86c:	9f 01       	movw	r18, r30
 86e:	2f 5f       	subi	r18, 0xFF	; 255
 870:	3f 4f       	sbci	r19, 0xFF	; 255
 872:	39 83       	std	Y+1, r19	; 0x01
 874:	28 83       	st	Y, r18
 876:	10 83       	st	Z, r17
 878:	06 c0       	rjmp	.+12     	; 0x886 <fputc+0x4a>
 87a:	e8 85       	ldd	r30, Y+8	; 0x08
 87c:	f9 85       	ldd	r31, Y+9	; 0x09
 87e:	81 2f       	mov	r24, r17
 880:	09 95       	icall
 882:	89 2b       	or	r24, r25
 884:	29 f7       	brne	.-54     	; 0x850 <fputc+0x14>
 886:	2e 81       	ldd	r18, Y+6	; 0x06
 888:	3f 81       	ldd	r19, Y+7	; 0x07
 88a:	2f 5f       	subi	r18, 0xFF	; 255
 88c:	3f 4f       	sbci	r19, 0xFF	; 255
 88e:	3f 83       	std	Y+7, r19	; 0x07
 890:	2e 83       	std	Y+6, r18	; 0x06
 892:	81 2f       	mov	r24, r17
 894:	90 2f       	mov	r25, r16
 896:	df 91       	pop	r29
 898:	cf 91       	pop	r28
 89a:	1f 91       	pop	r17
 89c:	0f 91       	pop	r16
 89e:	08 95       	ret

000008a0 <__ultoa_invert>:
 8a0:	fa 01       	movw	r30, r20
 8a2:	aa 27       	eor	r26, r26
 8a4:	28 30       	cpi	r18, 0x08	; 8
 8a6:	51 f1       	breq	.+84     	; 0x8fc <__ultoa_invert+0x5c>
 8a8:	20 31       	cpi	r18, 0x10	; 16
 8aa:	81 f1       	breq	.+96     	; 0x90c <__stack+0xd>
 8ac:	e8 94       	clt
 8ae:	6f 93       	push	r22
 8b0:	6e 7f       	andi	r22, 0xFE	; 254
 8b2:	6e 5f       	subi	r22, 0xFE	; 254
 8b4:	7f 4f       	sbci	r23, 0xFF	; 255
 8b6:	8f 4f       	sbci	r24, 0xFF	; 255
 8b8:	9f 4f       	sbci	r25, 0xFF	; 255
 8ba:	af 4f       	sbci	r26, 0xFF	; 255
 8bc:	b1 e0       	ldi	r27, 0x01	; 1
 8be:	3e d0       	rcall	.+124    	; 0x93c <__stack+0x3d>
 8c0:	b4 e0       	ldi	r27, 0x04	; 4
 8c2:	3c d0       	rcall	.+120    	; 0x93c <__stack+0x3d>
 8c4:	67 0f       	add	r22, r23
 8c6:	78 1f       	adc	r23, r24
 8c8:	89 1f       	adc	r24, r25
 8ca:	9a 1f       	adc	r25, r26
 8cc:	a1 1d       	adc	r26, r1
 8ce:	68 0f       	add	r22, r24
 8d0:	79 1f       	adc	r23, r25
 8d2:	8a 1f       	adc	r24, r26
 8d4:	91 1d       	adc	r25, r1
 8d6:	a1 1d       	adc	r26, r1
 8d8:	6a 0f       	add	r22, r26
 8da:	71 1d       	adc	r23, r1
 8dc:	81 1d       	adc	r24, r1
 8de:	91 1d       	adc	r25, r1
 8e0:	a1 1d       	adc	r26, r1
 8e2:	20 d0       	rcall	.+64     	; 0x924 <__stack+0x25>
 8e4:	09 f4       	brne	.+2      	; 0x8e8 <__ultoa_invert+0x48>
 8e6:	68 94       	set
 8e8:	3f 91       	pop	r19
 8ea:	2a e0       	ldi	r18, 0x0A	; 10
 8ec:	26 9f       	mul	r18, r22
 8ee:	11 24       	eor	r1, r1
 8f0:	30 19       	sub	r19, r0
 8f2:	30 5d       	subi	r19, 0xD0	; 208
 8f4:	31 93       	st	Z+, r19
 8f6:	de f6       	brtc	.-74     	; 0x8ae <__ultoa_invert+0xe>
 8f8:	cf 01       	movw	r24, r30
 8fa:	08 95       	ret
 8fc:	46 2f       	mov	r20, r22
 8fe:	47 70       	andi	r20, 0x07	; 7
 900:	40 5d       	subi	r20, 0xD0	; 208
 902:	41 93       	st	Z+, r20
 904:	b3 e0       	ldi	r27, 0x03	; 3
 906:	0f d0       	rcall	.+30     	; 0x926 <__stack+0x27>
 908:	c9 f7       	brne	.-14     	; 0x8fc <__ultoa_invert+0x5c>
 90a:	f6 cf       	rjmp	.-20     	; 0x8f8 <__ultoa_invert+0x58>
 90c:	46 2f       	mov	r20, r22
 90e:	4f 70       	andi	r20, 0x0F	; 15
 910:	40 5d       	subi	r20, 0xD0	; 208
 912:	4a 33       	cpi	r20, 0x3A	; 58
 914:	18 f0       	brcs	.+6      	; 0x91c <__stack+0x1d>
 916:	49 5d       	subi	r20, 0xD9	; 217
 918:	31 fd       	sbrc	r19, 1
 91a:	40 52       	subi	r20, 0x20	; 32
 91c:	41 93       	st	Z+, r20
 91e:	02 d0       	rcall	.+4      	; 0x924 <__stack+0x25>
 920:	a9 f7       	brne	.-22     	; 0x90c <__stack+0xd>
 922:	ea cf       	rjmp	.-44     	; 0x8f8 <__ultoa_invert+0x58>
 924:	b4 e0       	ldi	r27, 0x04	; 4
 926:	a6 95       	lsr	r26
 928:	97 95       	ror	r25
 92a:	87 95       	ror	r24
 92c:	77 95       	ror	r23
 92e:	67 95       	ror	r22
 930:	ba 95       	dec	r27
 932:	c9 f7       	brne	.-14     	; 0x926 <__stack+0x27>
 934:	00 97       	sbiw	r24, 0x00	; 0
 936:	61 05       	cpc	r22, r1
 938:	71 05       	cpc	r23, r1
 93a:	08 95       	ret
 93c:	9b 01       	movw	r18, r22
 93e:	ac 01       	movw	r20, r24
 940:	0a 2e       	mov	r0, r26
 942:	06 94       	lsr	r0
 944:	57 95       	ror	r21
 946:	47 95       	ror	r20
 948:	37 95       	ror	r19
 94a:	27 95       	ror	r18
 94c:	ba 95       	dec	r27
 94e:	c9 f7       	brne	.-14     	; 0x942 <__stack+0x43>
 950:	62 0f       	add	r22, r18
 952:	73 1f       	adc	r23, r19
 954:	84 1f       	adc	r24, r20
 956:	95 1f       	adc	r25, r21
 958:	a0 1d       	adc	r26, r0
 95a:	08 95       	ret

0000095c <__prologue_saves__>:
 95c:	2f 92       	push	r2
 95e:	3f 92       	push	r3
 960:	4f 92       	push	r4
 962:	5f 92       	push	r5
 964:	6f 92       	push	r6
 966:	7f 92       	push	r7
 968:	8f 92       	push	r8
 96a:	9f 92       	push	r9
 96c:	af 92       	push	r10
 96e:	bf 92       	push	r11
 970:	cf 92       	push	r12
 972:	df 92       	push	r13
 974:	ef 92       	push	r14
 976:	ff 92       	push	r15
 978:	0f 93       	push	r16
 97a:	1f 93       	push	r17
 97c:	cf 93       	push	r28
 97e:	df 93       	push	r29
 980:	cd b7       	in	r28, 0x3d	; 61
 982:	de b7       	in	r29, 0x3e	; 62
 984:	ca 1b       	sub	r28, r26
 986:	db 0b       	sbc	r29, r27
 988:	0f b6       	in	r0, 0x3f	; 63
 98a:	f8 94       	cli
 98c:	de bf       	out	0x3e, r29	; 62
 98e:	0f be       	out	0x3f, r0	; 63
 990:	cd bf       	out	0x3d, r28	; 61
 992:	09 94       	ijmp

00000994 <__epilogue_restores__>:
 994:	2a 88       	ldd	r2, Y+18	; 0x12
 996:	39 88       	ldd	r3, Y+17	; 0x11
 998:	48 88       	ldd	r4, Y+16	; 0x10
 99a:	5f 84       	ldd	r5, Y+15	; 0x0f
 99c:	6e 84       	ldd	r6, Y+14	; 0x0e
 99e:	7d 84       	ldd	r7, Y+13	; 0x0d
 9a0:	8c 84       	ldd	r8, Y+12	; 0x0c
 9a2:	9b 84       	ldd	r9, Y+11	; 0x0b
 9a4:	aa 84       	ldd	r10, Y+10	; 0x0a
 9a6:	b9 84       	ldd	r11, Y+9	; 0x09
 9a8:	c8 84       	ldd	r12, Y+8	; 0x08
 9aa:	df 80       	ldd	r13, Y+7	; 0x07
 9ac:	ee 80       	ldd	r14, Y+6	; 0x06
 9ae:	fd 80       	ldd	r15, Y+5	; 0x05
 9b0:	0c 81       	ldd	r16, Y+4	; 0x04
 9b2:	1b 81       	ldd	r17, Y+3	; 0x03
 9b4:	aa 81       	ldd	r26, Y+2	; 0x02
 9b6:	b9 81       	ldd	r27, Y+1	; 0x01
 9b8:	ce 0f       	add	r28, r30
 9ba:	d1 1d       	adc	r29, r1
 9bc:	0f b6       	in	r0, 0x3f	; 63
 9be:	f8 94       	cli
 9c0:	de bf       	out	0x3e, r29	; 62
 9c2:	0f be       	out	0x3f, r0	; 63
 9c4:	cd bf       	out	0x3d, r28	; 61
 9c6:	ed 01       	movw	r28, r26
 9c8:	08 95       	ret

000009ca <_exit>:
 9ca:	f8 94       	cli

000009cc <__stop_program>:
 9cc:	ff cf       	rjmp	.-2      	; 0x9cc <__stop_program>
